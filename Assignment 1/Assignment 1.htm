<!DOCTYPE html>
<!-- saved from url=(0075)http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a1.html -->
<html class="gr__moodle_hku_hk"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="./Assignment 1_files/tut-loader.js"></script>
    <script>
      TutLoader({ 
        title: "Assignment 1 (Due: March 7, 2018 23:55)",
        links: {
          'Python Homepage': 'https://www.python.org/',
          'Course Moodle': 'http://moodle.hku.hk/course/view.php?id=54545',
          'Python Sandbox': 'http://moodle.hku.hk/mod/vpl/view.php?id=1163078'
        },
        credit: "Created by Kevin Lam (yklam2@cs), supervised by Dirk (sdirk@cs), for the course ENGG1202B, HKU, year 2017-2018"
      });
    </script>
  <script src="./Assignment 1_files/es6-shim.min.js"></script><link rel="stylesheet" href="./Assignment 1_files/material-components-web.min.css"><link rel="stylesheet" href="./Assignment 1_files/css"><link rel="stylesheet" href="./Assignment 1_files/icon"><link rel="stylesheet" href="./Assignment 1_files/font-awesome.min.css"><link rel="stylesheet" href="./Assignment 1_files/theme.css"><link rel="stylesheet" href="./Assignment 1_files/style.css"><script src="./Assignment 1_files/underscore-min.js"></script><script src="./Assignment 1_files/quickDOM.js"></script><script src="./Assignment 1_files/worker.js"></script><script src="./Assignment 1_files/material-components-web.min.js"></script><title>Assignment 1 (Due: March 7, 2018 23:55)</title><script src="./Assignment 1_files/marked.min.js"></script><script src="./Assignment 1_files/syntaxhighlighter.js"></script><script src="./Assignment 1_files/MathJax.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!important; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Blank; src: url('about:blank')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body data-gr-c-s-loaded="true"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
<script id="mdcontent" type="text/markdown" style="display: none;">
# Overview
## Changelog
- This section will list all important changes made after the release of assignment. Announcement will also be made on Moodle when there is such a change.

## About the assignment
- In this assignment you will implement a few Python programs related to **cryptography**, and answer a few questions related to them.
- **You are expected to complete tutorial 1 to 3 before working on this assignment.** Specifically you must complete tutorial 3 to understand how our VPL works with function.
- You are not alone! If you find yourself stuck on something, send an email to Kevin and CC to Dirk for help. We want this assignment to be rewarding and instructional, not frustrating and demoralizing. But, we don't know when or how to help unless you ask.
- This assignment was designed by Kevin Lam. If you have any questions regarding this assignment, please send an email to Kevin and CC to Dirk.

## Submission
- You will receive **zero marks** if you submit after the deadline.
- For programming tasks, please submit it through the provided link to VPL. Your work is **automatically submitted** when you save your work in VPL.
- For written tasks, please submit it through the provided link to the Turnitin assignment activity.

## Plagiarism
- We will be checking your work against other submissions in the class and from the internet for logical redundancy. If you copy someone else's work and submit it with minor changes, we will know. We trust you all to submit your own work only; please don't let us down. If you do, we will pursue the **strongest consequences** available to us.
- Please be careful not to post spoilers to discussion forum. Please don't post any code that is directly related to the assignments. However you are welcome and encouraged to discuss general ideas on the discussion forums.

## Grading
- We will use an auto-grader to grade your program, please read the instructions in this document carefully to make sure that your program will pass the autograder.
- The evaluation function in the VPL will test your code for the **minimum requirement**. Your code must at least pass the test in the evaluation to get marks.
- The **correctness** of your implementation -- not the auto-grader's judgements -- will be the final judge of your score. If necessary, we will review and grade assignments individually to ensure that you receive due credit for your work.
- We will test your program with **additional test cases** apart from those included in the evaluation function.

## Sandbox
- There is a link to "Python Sandbox" in the menu of every tutorial, you could use it to test any Python code if needed.

# Programming Part 1: Affine Cipher (4%)
## VPL for this part

Click the button below to launch the VPL for this part of assignment.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199435">Launch VPL</button>

- Please define the required functions in <span>affine.py</span>. This file will be tested by the auto-grader.
- You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.

## Affine Cipher
- Recall the definition of Affine Cipher introduced in class:
> **Definition 1.4.4** Affine Cipher
> Let \\(x, y, a, b \in \mathbb{Z}_{26}\\)  
> **_Encryption:_** \\(e_k(x) = y \equiv ax+b \text{ mod } 26\\).
> **_Decryption:_** \\(d_k(x) = x \equiv a^{-1}(y-b) \text{ mod } 26\\).
- In this part, you are required to define two functions, `afencode(text, a, b)` and `afdecode(cipher, a, b)` in <span>affine.py</span>. Details will be explained below.

## Useful Python functions for this question
### `ord()` and `chr()`
- In python, a character is represented internally as a number. We can use the functions `ord()` and `chr()` to convert between a character and its internal code.
- Given a character `c`, `ord(c)` returns the integral code corresponding to the character `c`.
- Given a character code `a`, `chr(a)` returns the character (a string of length 1) corresponding to the internal code `a`.
- For example:
```python
c = "a"
a = ord( c )
c2 = chr( a )
print( c, "has a code of", a )
print( a, "is the code of the character", c2 )
```
will produce the output:
```
a has a code of 97
97 is the code of the character a
```

### Use of character code 
- Since the character code of <samp>a</samp> to <samp>z</samp> are consecutive, we can easily convert letter <samp>a</samp> to <samp>z</samp> to a range of <samp>0</samp> to <samp>25</samp>. For example:
```python
c = "k"
ord_a = ord('a')

print( c, "is", ord( c ) - ord( 'a' ), "letters after 'a'" )
```
will produce the output:
```
k is 10 letters after 'a'
```
- Using this idea, we can check the letter case of a character using similar method:
```python
def testCase(c):
  if ord( c ) >= ord( 'a' ) and ord( c ) <= ord( 'z' ):
    print( c, "is a lower case letter" )
  elif ord( c ) >= ord( 'A' ) and ord( c ) <= ord( 'Z' ):
    print( c, "is a capital letter" )
  else:
    print( c, "is not a letter" )
    
testCase( "k" )
testCase( "K" )
testCase( "*" )
```
which produces the output:
```
k is a lower case letter
K is a capital letter
* is not a letter
```

### Calculating Multiplicative Inverse
- To calculate the multiplicative inverse of value <samp>a</samp> in \\(\mathbb{Z}_n\\), we can use the [Extended Euclidean Algorithm](https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm).
- Here is the Python function that you can use directly in your code:
```python
def mInverse( a, n ):
    r0, r1, t0, t1 = n, a, 0, 1
    while r1 > 1:
        q = r0 // r1
        r2 = r0 - r1 * q
        t2 = t0 - t1 * q
        r0, r1 = r1, r2
        t0, t1 = t1, t2

    if r1 == 1:
        return t1 % n
    return 0
```
- For example, `mInverse(9, 26)` will return <samp>3</samp>.
- Note that the function will return <samp>0</samp> if there is no inverse for `a`.

## Task 1: Encryption (2%)
- Define the function `afencode(text, a, b)` in <span>affine.py</span> with three parameters, `text`, `a` and `b`.
- Parameter `text` is a string to be encrypted.
- Parameters `a` and `b` form the key of the cipher.
- The function should process each character in `text`, if the character is a letter, encrypt it using Affine Cipher, otherwise, the character is retained.
- Once the function is implemented in <span>affine.py</span>, you can test the funtion with the following code in <span>main.py</span>:
```python
from affine import *
text = "Attack!"
a = 9
b = 13
cipher = afencode( text, a, b )
print( text, "=>", cipher )
```
which produces the output:
```
Attack! => Nccnfz!
```
- Note that the letter case is preserved.
- You can assume that the parameter `text` is always a string, the paramters `a` and `b` are always integers.

## Task 2: Decryption (2%)
- Define the function `afdecode(cipher, a, b)` in <span>affine.py</span> with three parameters, `cipher`, `a` and `b`.
- Parameter `cipher` is a string to be decrypted.
- Parameters `a` and `b` form the key of the cipher.
- The function should process each character in `Cipher`, if the character is a letter, decrypt it using Affine Cipher, otherwise, the character is retained.
- Once the function is implemented in <span>affine.py</span>, you can test the funtion with the following code in <span>main.py</span>:
```python
from affine import *
cipher = "Nccnfz!"
a = 9
b = 13
text = afdecode( cipher, a, b )
print( cipher, "=>", text )
```
which produces the output:
```
Nccnfz! => Attack!
```
- Note that the letter case is preserved.
- You can make use of the given `mInverse()` function to find the inverse of `a`.
- You can assume that the parameter `cipher` is always a string, the parameters `a` and `b` are always integers, and there is an inverse for parameter `a`.

# Programming Part 2: RSA (4%)
## VPL for this part

Click the button below to launch the VPL for this part of assignment.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199496">Launch VPL</button>

- Please define the required functions in <span>rsa.py</span>. This file will be tested by the auto-grader.
- You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.

## RSA
- Recall the formulas for RSA encryption introduced in class:
> **RSA Encryption** Given the public key \\((n,e)=k\_{pub}\\) and the plaintext \\(x\\), the encryption function is: $$ y=e\_{k\_{pub}}(x) \equiv x^e \text{ mod } n $$ where \\(x,y \in \mathbb{Z}_n\\)
 
- Recall the formulas for RSA decryption introduced in class:
> **RSA Decryption** Given the private key \\((n,d)=k\_{pr}\\) and the ciphertext \\(y\\), the decryption function is: $$ x=d\_{k\_{pr}}(y) \equiv y^d \text{ mod } n $$ where \\(x,y \in \mathbb{Z}_n\\)

- In this part, you are required to define three functions, `rsaencrypt(number, n, e)`, `rsadecrypt(code, n, d)`, and `rsahack(n, e)` in <span>rsa.py</span>. Details will be explained below.

## Useful Python functions for this question
### power operator `**` and `pow()` function
- The power operator in python is `**`. (Note that `^` is **NOT** the power operator). For example:
```python
a = 2
b = 10
# This is correct
print( a, "**", b, "=", a**b )
# This is not correct!
print( a, "^", b, "=", a^b )
```
which will produce the output:
```
2 ** 10 = 1024
2 ^ 10 = 8
```

- Alternatively you can use the `pow()` function:
```python
a = 2
b = 10
print( a, "**", b, "=", pow( a, b ) )
```
which will produce the output:
```
2 ** 10 = 1024
```

### power and modulo operation
- It is very common to use the power operator together with the modulo operator. 
- For example, during RSA encryption, one may need to calculate the value of \\(a^e \text{ mod } n\\).
- The operation may be implemented using the power operator `**` and the modulo operator `%`:
```python
a = 12345
n = 3071
e = 43
print( a, "**", e, "mod", n, "=", a ** e % n )
```
which produces the output:
```
12345 ** 43 mod 3071 = 2891
```
- However, if the number is very large, the power operator will not be able to handle it. For example, when `n=33514648327550` and `e=5789177`, the VPL will not be able to handle the calculation. The code:
```python
a = 12345
n = 33514648327550
e = 5789177
print( a, "**", e, "mod", n, "=", a ** e % n )
```
takes about 1 minute to complete.
- For a even larger number, VPL may even fails to return a solution.
- To solve the problem, we can use the `pow()` function instead. The `pow()` function takes a third parameter that performs the modulo operation. For example:
```python
a = 12345
n = 33514648327550
e = 5789177
print( a, "**", e, "mod", n, "=", pow( a, e, n ) )
```
will give you the result almost immediately.
- The reason is that `pow()` function will compute power and modulo at the same time, which is much more efficient.

## Key generator
- When testing your code, you may need some pairs of RSA keys. Click the button below to launch the RSA key generator.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199517">Launch VPL</button>

- If you click on the save button and then click the run button <i class="fa fa-lg fa-rocket"></i> in the above VPL, you will receive a random pair of keys that you can use when you test your code.

## Task 1: RSA encryption (1%)
- Define the function `rsaencrypt(value, n, e)` in <span>rsa.py</span> with three parameters, `value`, `n` and `e`.
- Parameter `value` is a value to be encrypted.
- Parameters `n` and `e` form the public key for the RSA encryption.
- The function should encrypt the value using RSA public key \\((n, e)\\) and return the resulting code.
- Once the function is implemented in <span>rsa.py</span>, you can test the funtion with the following code in <span>main.py</span>:
```python
from rsa import *
value = 100
n = 30360138080141                                                                  
e = 5510009                                                                         
code = rsaencrypt( value, n, e )
print( value, "=>", code )
```
which produces the output of:
```
100 => 15251238784560
```
- You can assume that the parameters `value`, `n`, and `e` are always integers.

## Task 2: RSA decryption (0.5%)
- Define the function `rsadecrypt(value, n, d)` in <span>rsa.py</span> with three parameters, `value`, `n` and `d`.
- Parameter `value` is a value to be encrypted.
- Parameters `n` and `d` form the private key for the RSA decryption.
- The function should decrypt and return the code using RSA private key \\((n, d)\\) and return the resulting value.
- Once the function is implemented in <span>rsa.py</span>, you can test the funtion with the following code in <span>main.py</span>:
```python
from rsa import *
code = 15251238784560
n = 30360138080141                                                                  
d = 24201026397005
value = rsadecrypt( code, n, d )
print( code, "=>", value )
```
which produces the output of:
```
15251238784560 => 100
```
- You can assume that the parameters `value`, `n`, and `d` are always integers.

## Task 3: RSA hacking (2.5%)
- Given a public key, e.g., (493, 11), if \\(n\\) can be factorized, it is possible to derive a private key from the public key.
- Define the function `rsahack(n, e)` in <span>rsa.py</span> with two parameters, `n` and `e`.
- Parameter `n` and `e` form a public key for RSA encryption.
- The function should try to factorize `n` and calculate the `d` that forms the private key.
- Once the function is implemented in <span>rsa.py</span>, you can test the funtion with the following code in <span>main.py</span>:
```python
from rsa import *
n = 493                                                                  
e = 11
d = rsahack( n, e )
print( n, ",", e, "=>", d )
```
which produces the output of:
```
493, 11 => 163
```
- It is part of the assignment that you need to find out how the value of `d` can be calculated.
- You can make use of the `mInverse()` function provided in the previous question to calculate the multiplicative inverse.
- You can assume that the parameters `n`, and `e` are always integers, and `n` will be small enough to be easily factorized.

# Written Question (12%)
## Turnitin
Click the button below to launch the Turnitin activity for this part of assignment.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/turnitintooltwo/view.php?id=1199686">Launch Turnitin</button>

- Please submit in <code>.docx</code> or <code>.pdf</code> format.
- Hand-written answer may not be marked if they are not clearly visible. Note that Turnitin may not accept document without any detectable words. You can include a cover page to bypass such test.

## Notes about written question
- When answering these questions, remember that you can make use of the Python sandbox or the <span>main.py</span> of the two VPLs in this assignment to run your Python program.
- You should label your answer with the question number clearly.

## Question related to Affine Cipher.
**Q1**. Let \\(x, y, a, b \in \mathbb{Z}_{26}\\). Is there any limitation to the choice of `a` and `b` in Affine Cipher? If so, what is it? (0.5%)

> Answer: gcd(a,26) = 1

**Q2**. If we perform a brute-force attack on Affine Cipher, what is the maximum number of pairs of values `(a, b)` will be tested? Show your calculation. (1%)

> Answer: \\(12 \times 26 = 312\\)

**Q3**. Nancy suggests that we can increase the key space by removing the constraint of \\(a, b \in \mathbb{Z}_{26}\\), so that there can be more possible values for `a` and `b`. Will Affine Cipher still work with such change? If so, explain how it will affect the key space. If not, explain why it does not work. (1.5%)

> Answer: Affine Cipher still work with such change. Key space will not be affected as \\(a x + b \text{ mod } 26 = ((a \text{ mod } 26) x + (b \text{ mod } 26)) \text{ mod } 26\\).

**Q4**. Click the button below to launch the VPL activity for this part of assignment. <button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199257">Launch VPL</button>
- Click on the save button and then click on the run button <i class="fa fa-lg fa-rocket"></i> and enter your student ID as prompted. 
- You will be provided with a pair of plaintext and ciphertext. 
- Given that the ciphertext is the result of applying Affine Cipher on the plaintext with an unknown key \\((a, b)\\). Illustrate how you can find the key **without** using the brute-force approach. You should show your steps in your answer. (3%)

> Answer (tips): The easiest way is to find the corresponding cipher text of plaintext 'a' and 'b'.

## Question related to RSA.
**Q5**. Explain what you have done in your implementation of `rsahack()` to find the value of `d` from the public key `(n, e)`. (1%)

> Answer (example): factorize `n` to `p` and `q`, calculate \\(\Phi(n)=p \times q\\), find `d = mInverse(e, n)`. 

**Q6**. Suggest a way to validate that the value of `d` returned by `rsahack()` is correct. Illustrate your idea using public key \\((493, 11)\\) and private key \\((493, 163)\\). (1.5%)

> Answer (example): try encrypting and decrypting a few values. 

**Q7**. In tutorial 2, you are asked to write a program to check for prime numbers. While the trial division method (test if a number can be divided by some other numbers) is simple to implement and accurate, it is not used in RSA keys generation. Instead, **Probabilistic tests** which is not 100% accurate including the **Fermat primality test** and its variants are used. Research what these tests are and give two reasons why the inaccurate method are used in RSA key generation instead of the 100% accurate trial division method. (1.5%)

> Answer (example): probabilistic tests are faster; they are necessary to find large prime; etc.

**Q8**. Using the RSA encryption/decryption method introduced, why is result of encrypting the value of <samp>0</samp> and <samp>1</samp> not desirable? Suggest one way to overcome the problem. Illustrate your idea by encrypting and decrypting the value of 1 and 491, using public key \\((493, 11)\\) and private key \\((493, 163)\\). State also if there is any drawback in using your suggested method. (2%)

> Answer (example): 0 and 1 will be encrypted to the same value using RSA. Padding is needed. 

</script>
  
  
<header class="mdc-toolbar mdc-toolbar--fixed"><div class="mdc-toolbar__row"><section class="mdc-toolbar__section mdc-toolbar__section--align-start"><a id="toolbar-menu" class="material-icons mdc-toolbar__menu-icon" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a1.html#">menu</a><span class="mdc-toolbar__title">Assignment 1 (Due: March 7, 2018 23:55)</span></section></div></header><div id="sidenav-content" class="mdc-toolbar-fixed-adjust"><aside id="sidenav" class="mdc-drawer mdc-temporary-drawer mdc-typography" style="--mdc-temporary-drawer-opacity:0;"><nav class="mdc-temporary-drawer__drawer"><div class="mdc-list-group"><nav id="sidenav-nav" class="mdc-list"><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a1.html#s1">Overview</a><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a1.html#s2">Programming Part 1: Affine Cipher (4%)</a><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a1.html#s3">Programming Part 2: RSA (4%)</a><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a1.html#s4">Written Question (12%)</a></nav><hr class="mdc-list-divider"><nav id="sidenav-links" class="mdc-list"><a class="mdc-list-item" href="https://www.python.org/" rel="external" data-mdc-tabindex-handled="true" tabindex="-1">Python Homepage</a><a class="mdc-list-item" href="http://moodle.hku.hk/course/view.php?id=54545" rel="external" data-mdc-tabindex-handled="true" tabindex="-1">Course Moodle</a><a class="mdc-list-item" href="http://moodle.hku.hk/mod/vpl/view.php?id=1163078" rel="external" data-mdc-tabindex-handled="true" tabindex="-1">Python Sandbox</a></nav></div></nav></aside><main><section data-section="1" class="tut-section mdc-elevation--z2"><a id="s1" name="s1" class="anchor"></a><h1 id="overview">Overview</h1><article class="mdc-elevation--z4"><a id="s1" name="s1a1" class="anchor"></a><h2 id="changelog">Changelog</h2><ul>
<li>This section will list all important changes made after the release of assignment. Announcement will also be made on Moodle when there is such a change.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a2" class="anchor"></a><h2 id="about-the-assignment">About the assignment</h2><ul>
<li>In this assignment you will implement a few Python programs related to <strong>cryptography</strong>, and answer a few questions related to them.</li>
<li><strong>You are expected to complete tutorial 1 to 3 before working on this assignment.</strong> Specifically you must complete tutorial 3 to understand how our VPL works with function.</li>
<li>You are not alone! If you find yourself stuck on something, send an email to Kevin and CC to Dirk for help. We want this assignment to be rewarding and instructional, not frustrating and demoralizing. But, we don't know when or how to help unless you ask.</li>
<li>This assignment was designed by Kevin Lam. If you have any questions regarding this assignment, please send an email to Kevin and CC to Dirk.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a3" class="anchor"></a><h2 id="submission">Submission</h2><ul>
<li>You will receive <strong>zero marks</strong> if you submit after the deadline.</li>
<li>For programming tasks, please submit it through the provided link to VPL. Your work is <strong>automatically submitted</strong> when you save your work in VPL.</li>
<li>For written tasks, please submit it through the provided link to the Turnitin assignment activity.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a4" class="anchor"></a><h2 id="plagiarism">Plagiarism</h2><ul>
<li>We will be checking your work against other submissions in the class and from the internet for logical redundancy. If you copy someone else's work and submit it with minor changes, we will know. We trust you all to submit your own work only; please don't let us down. If you do, we will pursue the <strong>strongest consequences</strong> available to us.</li>
<li>Please be careful not to post spoilers to discussion forum. Please don't post any code that is directly related to the assignments. However you are welcome and encouraged to discuss general ideas on the discussion forums.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a5" class="anchor"></a><h2 id="grading">Grading</h2><ul>
<li>We will use an auto-grader to grade your program, please read the instructions in this document carefully to make sure that your program will pass the autograder.</li>
<li>The evaluation function in the VPL will test your code for the <strong>minimum requirement</strong>. Your code must at least pass the test in the evaluation to get marks.</li>
<li>The <strong>correctness</strong> of your implementation -- not the auto-grader's judgements -- will be the final judge of your score. If necessary, we will review and grade assignments individually to ensure that you receive due credit for your work.</li>
<li>We will test your program with <strong>additional test cases</strong> apart from those included in the evaluation function.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a6" class="anchor"></a><h2 id="sandbox">Sandbox</h2><ul>
<li>There is a link to "Python Sandbox" in the menu of every tutorial, you could use it to test any Python code if needed.</li>
</ul></article></section><section data-section="2" class="tut-section mdc-elevation--z2"><a id="s2" name="s2" class="anchor"></a><h1 id="programming-part-1-affine-cipher-4-">Programming Part 1: Affine Cipher (4%)</h1><article class="mdc-elevation--z4"><a id="s2" name="s2a1" class="anchor"></a><h2 id="vpl-for-this-part">VPL for this part</h2><p>Click the button below to launch the VPL for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199435">Launch VPL</button><ul>
<li>Please define the required functions in <span>affine.py</span>. This file will be tested by the auto-grader.</li>
<li>You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a2" class="anchor"></a><h2 id="affine-cipher">Affine Cipher</h2><ul>
<li>Recall the definition of Affine Cipher introduced in class:<blockquote>
<p><strong>Definition 1.4.4</strong> Affine Cipher<br>Let <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo&gt;&amp;#x2208;&lt;/mo&gt;&lt;msub&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 6.755em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.03em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.03em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="mi" id="MathJax-Span-3" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-4" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-5" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">y</span><span class="mo" id="MathJax-Span-6" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-7" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">a</span><span class="mo" id="MathJax-Span-8" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-9" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">b</span><span class="mo" id="MathJax-Span-10" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">∈</span><span class="msubsup" id="MathJax-Span-11" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.509em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.67em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="texatom" id="MathJax-Span-12"><span class="mrow" id="MathJax-Span-13"><span class="mi" id="MathJax-Span-14" style="font-family: STIXGeneral-Regular;">ℤ</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.728em;"><span class="texatom" id="MathJax-Span-15"><span class="mrow" id="MathJax-Span-16"><span class="mn" id="MathJax-Span-17" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">26</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo>∈</mo><msub><mrow class="MJX-TeXAtom-ORD"><mi mathvariant="double-struck">Z</mi></mrow><mrow class="MJX-TeXAtom-ORD"><mn>26</mn></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-1">x, y, a, b \in \mathbb{Z}_{26}</script><br><strong><em>Encryption:</em></strong> <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;&amp;#x2261;&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-18" style="width: 12.28em; display: inline-block;"><span style="display: inline-block; position: relative; width: 10.94em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1010.88em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-19"><span class="msubsup" id="MathJax-Span-20"><span style="display: inline-block; position: relative; width: 0.84em; height: 0px;"><span style="position: absolute; clip: rect(3.407em, 1000.39em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-21" style="font-family: STIXGeneral-Italic;">e</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.449em;"><span class="mi" id="MathJax-Span-22" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mo" id="MathJax-Span-23" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-24" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-25" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-26" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mi" id="MathJax-Span-27" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">y</span><span class="mo" id="MathJax-Span-28" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">≡</span><span class="mi" id="MathJax-Span-29" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">a</span><span class="mi" id="MathJax-Span-30" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-31" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-32" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">b</span><span class="mtext" id="MathJax-Span-33" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mn" id="MathJax-Span-34" style="font-family: STIXGeneral-Regular;">26</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>y</mi><mo>≡</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mtext>&nbsp;mod&nbsp;</mtext><mn>26</mn></math></span></span><script type="math/tex" id="MathJax-Element-2">e_k(x) = y \equiv ax+b \text{ mod } 26</script>.<br><strong><em>Decryption:</em></strong> <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;&amp;#x2261;&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-35" style="width: 14.065em; display: inline-block;"><span style="display: inline-block; position: relative; width: 12.559em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.509em, 1012.5em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-36"><span class="msubsup" id="MathJax-Span-37"><span style="display: inline-block; position: relative; width: 0.896em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.5em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-38" style="font-family: STIXGeneral-Italic;">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.505em;"><span class="mi" id="MathJax-Span-39" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mo" id="MathJax-Span-40" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-41" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-42" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-43" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mi" id="MathJax-Span-44" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-45" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">≡</span><span class="msubsup" id="MathJax-Span-46" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.398em; height: 0px;"><span style="position: absolute; clip: rect(3.407em, 1000.5em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-47" style="font-family: STIXGeneral-Italic;">a</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -4.406em; left: 0.505em;"><span class="texatom" id="MathJax-Span-48"><span class="mrow" id="MathJax-Span-49"><span class="mo" id="MathJax-Span-50" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">−</span><span class="mn" id="MathJax-Span-51" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mo" id="MathJax-Span-52" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-53" style="font-family: STIXGeneral-Italic;">y</span><span class="mo" id="MathJax-Span-54" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">−</span><span class="mi" id="MathJax-Span-55" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">b</span><span class="mo" id="MathJax-Span-56" style="font-family: STIXGeneral-Regular;">)</span><span class="mtext" id="MathJax-Span-57" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mn" id="MathJax-Span-58" style="font-family: STIXGeneral-Regular;">26</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.316em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>d</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>≡</mo><msup><mi>a</mi><mrow class="MJX-TeXAtom-ORD"><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><mtext>&nbsp;mod&nbsp;</mtext><mn>26</mn></math></span></span><script type="math/tex" id="MathJax-Element-3">d_k(x) = x \equiv a^{-1}(y-b) \text{ mod } 26</script>.</p>
</blockquote>
</li>
<li>In this part, you are required to define two functions, <code>afencode(text, a, b)</code> and <code>afdecode(cipher, a, b)</code> in <span>affine.py</span>. Details will be explained below.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a3" class="anchor"></a><h2 id="useful-python-functions-for-this-question">Useful Python functions for this question</h2><h3 id="-ord-and-chr-"><code>ord()</code> and <code>chr()</code></h3><ul>
<li>In python, a character is represented internally as a number. We can use the functions <code>ord()</code> and <code>chr()</code> to convert between a character and its internal code.</li>
<li>Given a character <code>c</code>, <code>ord(c)</code> returns the integral code corresponding to the character <code>c</code>.</li>
<li>Given a character code <code>a</code>, <code>chr(a)</code> returns the character (a string of length 1) corresponding to the internal code <code>a</code>.</li>
<li>For example:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">c </code><code class="python keyword">=</code> <code class="python string">"a"</code></div><div class="line number2 index1 alt1"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python functions">ord</code><code class="python plain">( c )</code></div><div class="line number3 index2 alt2"><code class="python plain">c2 </code><code class="python keyword">=</code> <code class="python functions">chr</code><code class="python plain">( a )</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">( c, </code><code class="python string">"has a code of"</code><code class="python plain">, a )</code></div><div class="line number5 index4 alt2"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"is the code of the character"</code><code class="python plain">, c2 )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
will produce the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">a has a code of 97</code></div><div class="line number2 index1 alt1"><code class="plain plain">97 is the code of the character a</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
</ul><h3 id="use-of-character-code">Use of character code</h3><ul>
<li>Since the character code of <samp>a</samp> to <samp>z</samp> are consecutive, we can easily convert letter <samp>a</samp> to <samp>z</samp> to a range of <samp>0</samp> to <samp>25</samp>. For example:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">c </code><code class="python keyword">=</code> <code class="python string">"k"</code></div><div class="line number2 index1 alt1"><code class="python plain">ord_a </code><code class="python keyword">=</code> <code class="python functions">ord</code><code class="python plain">(</code><code class="python string">'a'</code><code class="python plain">)</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">( c, </code><code class="python string">"is"</code><code class="python plain">, </code><code class="python functions">ord</code><code class="python plain">( c ) </code><code class="python keyword">-</code> <code class="python functions">ord</code><code class="python plain">( </code><code class="python string">'a'</code> <code class="python plain">), </code><code class="python string">"letters after 'a'"</code> <code class="python plain">)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
will produce the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">k is 10 letters after 'a'</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Using this idea, we can check the letter case of a character using similar method:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">testCase(c):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">if</code> <code class="python functions">ord</code><code class="python plain">( c ) &gt;</code><code class="python keyword">=</code> <code class="python functions">ord</code><code class="python plain">( </code><code class="python string">'a'</code> <code class="python plain">) </code><code class="python keyword">and</code> <code class="python functions">ord</code><code class="python plain">( c ) &lt;</code><code class="python keyword">=</code> <code class="python functions">ord</code><code class="python plain">( </code><code class="python string">'z'</code> <code class="python plain">):</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">( c, </code><code class="python string">"is a lower case letter"</code> <code class="python plain">)</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">elif</code> <code class="python functions">ord</code><code class="python plain">( c ) &gt;</code><code class="python keyword">=</code> <code class="python functions">ord</code><code class="python plain">( </code><code class="python string">'A'</code> <code class="python plain">) </code><code class="python keyword">and</code> <code class="python functions">ord</code><code class="python plain">( c ) &lt;</code><code class="python keyword">=</code> <code class="python functions">ord</code><code class="python plain">( </code><code class="python string">'Z'</code> <code class="python plain">):</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">( c, </code><code class="python string">"is a capital letter"</code> <code class="python plain">)</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">else</code><code class="python plain">:</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">( c, </code><code class="python string">"is not a letter"</code> <code class="python plain">)</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number9 index8 alt2"><code class="python plain">testCase( </code><code class="python string">"k"</code> <code class="python plain">)</code></div><div class="line number10 index9 alt1"><code class="python plain">testCase( </code><code class="python string">"K"</code> <code class="python plain">)</code></div><div class="line number11 index10 alt2"><code class="python plain">testCase( </code><code class="python string">"*"</code> <code class="python plain">)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">k is a lower case letter</code></div><div class="line number2 index1 alt1"><code class="plain plain">K is a capital letter</code></div><div class="line number3 index2 alt2"><code class="plain plain">* is not a letter</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
</ul><h3 id="calculating-multiplicative-inverse">Calculating Multiplicative Inverse</h3><ul>
<li>To calculate the multiplicative inverse of value <samp>a</samp> in <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-59" style="width: 1.342em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.175em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.454em, 1001.17em, 2.626em, -999.997em); top: -2.285em; left: 0em;"><span class="mrow" id="MathJax-Span-60"><span class="msubsup" id="MathJax-Span-61"><span style="display: inline-block; position: relative; width: 1.175em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.67em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="texatom" id="MathJax-Span-62"><span class="mrow" id="MathJax-Span-63"><span class="mi" id="MathJax-Span-64" style="font-family: STIXGeneral-Regular;">ℤ</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.728em;"><span class="mi" id="MathJax-Span-65" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">n</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.291em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mrow class="MJX-TeXAtom-ORD"><mi mathvariant="double-struck">Z</mi></mrow><mi>n</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-4">\mathbb{Z}_n</script>, we can use the <a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm">Extended Euclidean Algorithm</a>.</li>
<li>Here is the Python function that you can use directly in your code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">mInverse( a, n ):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">r0, r1, t0, t1 </code><code class="python keyword">=</code> <code class="python plain">n, a, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">while</code> <code class="python plain">r1 &gt; </code><code class="python value">1</code><code class="python plain">:</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">q </code><code class="python keyword">=</code> <code class="python plain">r0 </code><code class="python keyword">/</code><code class="python keyword">/</code> <code class="python plain">r1</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">r2 </code><code class="python keyword">=</code> <code class="python plain">r0 </code><code class="python keyword">-</code> <code class="python plain">r1 </code><code class="python keyword">*</code> <code class="python plain">q</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">t2 </code><code class="python keyword">=</code> <code class="python plain">t0 </code><code class="python keyword">-</code> <code class="python plain">t1 </code><code class="python keyword">*</code> <code class="python plain">q</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">r0, r1 </code><code class="python keyword">=</code> <code class="python plain">r1, r2</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">t0, t1 </code><code class="python keyword">=</code> <code class="python plain">t1, t2</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">if</code> <code class="python plain">r1 </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">:</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">t1 </code><code class="python keyword">%</code> <code class="python plain">n</code></div><div class="line number12 index11 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python value">0</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
</li>
<li>For example, <code>mInverse(9, 26)</code> will return <samp>3</samp>.</li>
<li>Note that the function will return <samp>0</samp> if there is no inverse for <code>a</code>.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a4" class="anchor"></a><h2 id="task-1-encryption-2-">Task 1: Encryption (2%)</h2><ul>
<li>Define the function <code>afencode(text, a, b)</code> in <span>affine.py</span> with three parameters, <code>text</code>, <code>a</code> and <code>b</code>.</li>
<li>Parameter <code>text</code> is a string to be encrypted.</li>
<li>Parameters <code>a</code> and <code>b</code> form the key of the cipher.</li>
<li>The function should process each character in <code>text</code>, if the character is a letter, encrypt it using Affine Cipher, otherwise, the character is retained.</li>
<li>Once the function is implemented in <span>affine.py</span>, you can test the funtion with the following code in <span>main.py</span>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">affine </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">text </code><code class="python keyword">=</code> <code class="python string">"Attack!"</code></div><div class="line number3 index2 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">9</code></div><div class="line number4 index3 alt1"><code class="python plain">b </code><code class="python keyword">=</code> <code class="python value">13</code></div><div class="line number5 index4 alt2"><code class="python plain">cipher </code><code class="python keyword">=</code> <code class="python plain">afencode( text, a, b )</code></div><div class="line number6 index5 alt1"><code class="python functions">print</code><code class="python plain">( text, </code><code class="python string">"=&gt;"</code><code class="python plain">, cipher )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Attack! =&gt; Nccnfz!</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Note that the letter case is preserved.</li>
<li>You can assume that the parameter <code>text</code> is always a string, the paramters <code>a</code> and <code>b</code> are always integers.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a5" class="anchor"></a><h2 id="task-2-decryption-2-">Task 2: Decryption (2%)</h2><ul>
<li>Define the function <code>afdecode(cipher, a, b)</code> in <span>affine.py</span> with three parameters, <code>cipher</code>, <code>a</code> and <code>b</code>.</li>
<li>Parameter <code>cipher</code> is a string to be decrypted.</li>
<li>Parameters <code>a</code> and <code>b</code> form the key of the cipher.</li>
<li>The function should process each character in <code>Cipher</code>, if the character is a letter, decrypt it using Affine Cipher, otherwise, the character is retained.</li>
<li>Once the function is implemented in <span>affine.py</span>, you can test the funtion with the following code in <span>main.py</span>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">affine </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">cipher </code><code class="python keyword">=</code> <code class="python string">"Nccnfz!"</code></div><div class="line number3 index2 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">9</code></div><div class="line number4 index3 alt1"><code class="python plain">b </code><code class="python keyword">=</code> <code class="python value">13</code></div><div class="line number5 index4 alt2"><code class="python plain">text </code><code class="python keyword">=</code> <code class="python plain">afdecode( cipher, a, b )</code></div><div class="line number6 index5 alt1"><code class="python functions">print</code><code class="python plain">( cipher, </code><code class="python string">"=&gt;"</code><code class="python plain">, text )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Nccnfz! =&gt; Attack!</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Note that the letter case is preserved.</li>
<li>You can make use of the given <code>mInverse()</code> function to find the inverse of <code>a</code>.</li>
<li>You can assume that the parameter <code>cipher</code> is always a string, the parameters <code>a</code> and <code>b</code> are always integers, and there is an inverse for parameter <code>a</code>.</li>
</ul></article></section><section data-section="3" class="tut-section mdc-elevation--z2"><a id="s3" name="s3" class="anchor"></a><h1 id="programming-part-2-rsa-4-">Programming Part 2: RSA (4%)</h1><article class="mdc-elevation--z4"><a id="s3" name="s3a1" class="anchor"></a><h2 id="vpl-for-this-part">VPL for this part</h2><p>Click the button below to launch the VPL for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199496">Launch VPL</button><ul>
<li>Please define the required functions in <span>rsa.py</span>. This file will be tested by the auto-grader.</li>
<li>You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a2" class="anchor"></a><h2 id="rsa">RSA</h2><ul>
<li><p>Recall the formulas for RSA encryption introduced in class:</p>
<blockquote>
<p><strong>RSA Encryption</strong> Given the public key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-66" style="width: 5.583em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.969em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.97em, 2.96em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-67"><span class="mo" id="MathJax-Span-68" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-69" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-70" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-71" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">e</span><span class="mo" id="MathJax-Span-72" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-73" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="msubsup" id="MathJax-Span-74" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.565em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.45em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-75" style="font-family: STIXGeneral-Italic;">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.449em;"><span class="texatom" id="MathJax-Span-76"><span class="mrow" id="MathJax-Span-77"><span class="mi" id="MathJax-Span-78" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">p</span><span class="mi" id="MathJax-Span-79" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">u</span><span class="mi" id="MathJax-Span-80" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">b</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.372em; border-left: 0px solid; width: 0px; height: 1.253em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>n</mi><mo>,</mo><mi>e</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>k</mi><mrow class="MJX-TeXAtom-ORD"><mi>p</mi><mi>u</mi><mi>b</mi></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-5">(n,e)=k_{pub}</script> and the plaintext <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-81" style="width: 0.505em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.449em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.9em, 1000.45em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-82"><span class="mi" id="MathJax-Span-83" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.628em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi></math></span></span><script type="math/tex" id="MathJax-Element-6">x</script>, the encryption function is: <span class="MathJax_Preview" style="color: inherit; display: none;"></span><div class="MathJax_Display" style="text-align: center;"><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" style="text-align: center; position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;#x2261;&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/msup&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-84" style="width: 10.717em; display: inline-block;"><span style="display: inline-block; position: relative; width: 9.545em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.621em, 1009.54em, 3.016em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-85"><span class="mi" id="MathJax-Span-86" style="font-family: STIXGeneral-Italic;">y</span><span class="mo" id="MathJax-Span-87" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="msubsup" id="MathJax-Span-88" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.621em; height: 0px;"><span style="position: absolute; clip: rect(3.407em, 1000.39em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-89" style="font-family: STIXGeneral-Italic;">e</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.449em;"><span class="texatom" id="MathJax-Span-90"><span class="mrow" id="MathJax-Span-91"><span class="msubsup" id="MathJax-Span-92"><span style="display: inline-block; position: relative; width: 1.119em; height: 0px;"><span style="position: absolute; clip: rect(3.351em, 1000.34em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-93" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.903em; left: 0.338em;"><span class="texatom" id="MathJax-Span-94"><span class="mrow" id="MathJax-Span-95"><span class="mi" id="MathJax-Span-96" style="font-size: 50%; font-family: STIXGeneral-Italic;">p</span><span class="mi" id="MathJax-Span-97" style="font-size: 50%; font-family: STIXGeneral-Italic;">u</span><span class="mi" id="MathJax-Span-98" style="font-size: 50%; font-family: STIXGeneral-Italic;">b</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mo" id="MathJax-Span-99" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-100" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-101" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-102" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">≡</span><span class="msubsup" id="MathJax-Span-103" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 0.896em; height: 0px;"><span style="position: absolute; clip: rect(3.407em, 1000.45em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-104" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -4.406em; left: 0.505em;"><span class="mi" id="MathJax-Span-105" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">e</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mtext" id="MathJax-Span-106" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mi" id="MathJax-Span-107" style="font-family: STIXGeneral-Italic;">n</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.434em; border-left: 0px solid; width: 0px; height: 1.316em;"></span></span></nobr><span class="MJX_Assistive_MathML MJX_Assistive_MathML_Block" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>y</mi><mo>=</mo><msub><mi>e</mi><mrow class="MJX-TeXAtom-ORD"><msub><mi>k</mi><mrow class="MJX-TeXAtom-ORD"><mi>p</mi><mi>u</mi><mi>b</mi></mrow></msub></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≡</mo><msup><mi>x</mi><mi>e</mi></msup><mtext>&nbsp;mod&nbsp;</mtext><mi>n</mi></math></span></span></div><script type="math/tex; mode=display" id="MathJax-Element-7"> y=e_{k_{pub}}(x) \equiv x^e \text{ mod } n </script> where <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;&amp;#x2208;&lt;/mo&gt;&lt;msub&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-108" style="width: 4.355em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.853em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1003.85em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-109"><span class="mi" id="MathJax-Span-110" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-111" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-112" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">y</span><span class="mo" id="MathJax-Span-113" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">∈</span><span class="msubsup" id="MathJax-Span-114" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.175em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.67em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="texatom" id="MathJax-Span-115"><span class="mrow" id="MathJax-Span-116"><span class="mi" id="MathJax-Span-117" style="font-family: STIXGeneral-Regular;">ℤ</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.728em;"><span class="mi" id="MathJax-Span-118" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">n</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>,</mo><mi>y</mi><mo>∈</mo><msub><mrow class="MJX-TeXAtom-ORD"><mi mathvariant="double-struck">Z</mi></mrow><mi>n</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-8">x,y \in \mathbb{Z}_n</script></p>
</blockquote>
</li>
<li><p>Recall the formulas for RSA decryption introduced in class:</p>
<blockquote>
<p><strong>RSA Decryption</strong> Given the private key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-119" style="width: 5.193em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.634em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.63em, 2.96em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-120"><span class="mo" id="MathJax-Span-121" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-122" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-123" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-124" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-125" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-126" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="msubsup" id="MathJax-Span-127" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.175em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.45em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-128" style="font-family: STIXGeneral-Italic;">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.449em;"><span class="texatom" id="MathJax-Span-129"><span class="mrow" id="MathJax-Span-130"><span class="mi" id="MathJax-Span-131" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">p</span><span class="mi" id="MathJax-Span-132" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.372em; border-left: 0px solid; width: 0px; height: 1.253em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>n</mi><mo>,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>k</mi><mrow class="MJX-TeXAtom-ORD"><mi>p</mi><mi>r</mi></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-9">(n,d)=k_{pr}</script> and the ciphertext <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-133" style="width: 0.505em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.449em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.9em, 1000.45em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-134"><span class="mi" id="MathJax-Span-135" style="font-family: STIXGeneral-Italic;">y</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>y</mi></math></span></span><script type="math/tex" id="MathJax-Element-10">y</script>, the decryption function is: <span class="MathJax_Preview" style="color: inherit; display: none;"></span><div class="MathJax_Display" style="text-align: center;"><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" style="text-align: center; position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;&amp;#x2261;&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;/msup&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-136" style="width: 10.438em; display: inline-block;"><span style="display: inline-block; position: relative; width: 9.322em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.454em, 1009.32em, 3.016em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-137"><span class="mi" id="MathJax-Span-138" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-139" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="msubsup" id="MathJax-Span-140" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.398em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.5em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-141" style="font-family: STIXGeneral-Italic;">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.505em;"><span class="texatom" id="MathJax-Span-142"><span class="mrow" id="MathJax-Span-143"><span class="msubsup" id="MathJax-Span-144"><span style="display: inline-block; position: relative; width: 0.84em; height: 0px;"><span style="position: absolute; clip: rect(3.351em, 1000.34em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-145" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">k<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.903em; left: 0.338em;"><span class="texatom" id="MathJax-Span-146"><span class="mrow" id="MathJax-Span-147"><span class="mi" id="MathJax-Span-148" style="font-size: 50%; font-family: STIXGeneral-Italic;">p</span><span class="mi" id="MathJax-Span-149" style="font-size: 50%; font-family: STIXGeneral-Italic;">r<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mo" id="MathJax-Span-150" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-151" style="font-family: STIXGeneral-Italic;">y</span><span class="mo" id="MathJax-Span-152" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-153" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">≡</span><span class="msubsup" id="MathJax-Span-154" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 0.896em; height: 0px;"><span style="position: absolute; clip: rect(3.407em, 1000.45em, 4.411em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-155" style="font-family: STIXGeneral-Italic;">y</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -4.406em; left: 0.449em;"><span class="mi" id="MathJax-Span-156" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mtext" id="MathJax-Span-157" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mi" id="MathJax-Span-158" style="font-family: STIXGeneral-Italic;">n</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.434em; border-left: 0px solid; width: 0px; height: 1.503em;"></span></span></nobr><span class="MJX_Assistive_MathML MJX_Assistive_MathML_Block" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>x</mi><mo>=</mo><msub><mi>d</mi><mrow class="MJX-TeXAtom-ORD"><msub><mi>k</mi><mrow class="MJX-TeXAtom-ORD"><mi>p</mi><mi>r</mi></mrow></msub></mrow></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>≡</mo><msup><mi>y</mi><mi>d</mi></msup><mtext>&nbsp;mod&nbsp;</mtext><mi>n</mi></math></span></span></div><script type="math/tex; mode=display" id="MathJax-Element-11"> x=d_{k_{pr}}(y) \equiv y^d \text{ mod } n </script> where <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-12-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;&amp;#x2208;&lt;/mo&gt;&lt;msub&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-159" style="width: 4.355em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.853em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1003.85em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-160"><span class="mi" id="MathJax-Span-161" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-162" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-163" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">y</span><span class="mo" id="MathJax-Span-164" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">∈</span><span class="msubsup" id="MathJax-Span-165" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.175em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.67em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="texatom" id="MathJax-Span-166"><span class="mrow" id="MathJax-Span-167"><span class="mi" id="MathJax-Span-168" style="font-family: STIXGeneral-Regular;">ℤ</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.728em;"><span class="mi" id="MathJax-Span-169" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">n</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>,</mo><mi>y</mi><mo>∈</mo><msub><mrow class="MJX-TeXAtom-ORD"><mi mathvariant="double-struck">Z</mi></mrow><mi>n</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-12">x,y \in \mathbb{Z}_n</script></p>
</blockquote>
</li>
<li><p>In this part, you are required to define three functions, <code>rsaencrypt(number, n, e)</code>, <code>rsadecrypt(code, n, d)</code>, and <code>rsahack(n, e)</code> in <span>rsa.py</span>. Details will be explained below.</p>
</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a3" class="anchor"></a><h2 id="useful-python-functions-for-this-question">Useful Python functions for this question</h2><h3 id="power-operator-and-pow-function">power operator <code>**</code> and <code>pow()</code> function</h3><ul>
<li><p>The power operator in python is <code>**</code>. (Note that <code>^</code> is <strong>NOT</strong> the power operator). For example:</p>
<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">2</code></div><div class="line number2 index1 alt1"><code class="python plain">b </code><code class="python keyword">=</code> <code class="python value">10</code></div><div class="line number3 index2 alt2"><code class="python comments"># This is correct</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"**"</code><code class="python plain">, b, </code><code class="python string">"="</code><code class="python plain">, a</code><code class="python keyword">*</code><code class="python keyword">*</code><code class="python plain">b )</code></div><div class="line number5 index4 alt2"><code class="python comments"># This is not correct!</code></div><div class="line number6 index5 alt1"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"^"</code><code class="python plain">, b, </code><code class="python string">"="</code><code class="python plain">, a^b )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
<p>which will produce the output:</p>
<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">2 ** 10 = 1024</code></div><div class="line number2 index1 alt1"><code class="plain plain">2 ^ 10 = 8</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li><p>Alternatively you can use the <code>pow()</code> function:</p>
<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">2</code></div><div class="line number2 index1 alt1"><code class="python plain">b </code><code class="python keyword">=</code> <code class="python value">10</code></div><div class="line number3 index2 alt2"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"**"</code><code class="python plain">, b, </code><code class="python string">"="</code><code class="python plain">, </code><code class="python functions">pow</code><code class="python plain">( a, b ) )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
<p>which will produce the output:</p>
<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">2 ** 10 = 1024</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
</ul><h3 id="power-and-modulo-operation">power and modulo operation</h3><ul>
<li>It is very common to use the power operator together with the modulo operator. </li>
<li>For example, during RSA encryption, one may need to calculate the value of <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-13-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/msup&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-170" style="width: 4.132em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.686em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1003.69em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-171"><span class="msubsup" id="MathJax-Span-172"><span style="display: inline-block; position: relative; width: 0.896em; height: 0px;"><span style="position: absolute; clip: rect(3.407em, 1000.5em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-173" style="font-family: STIXGeneral-Italic;">a</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -4.406em; left: 0.505em;"><span class="mi" id="MathJax-Span-174" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">e</span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span><span class="mtext" id="MathJax-Span-175" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mi" id="MathJax-Span-176" style="font-family: STIXGeneral-Italic;">n</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>a</mi><mi>e</mi></msup><mtext>&nbsp;mod&nbsp;</mtext><mi>n</mi></math></span></span><script type="math/tex" id="MathJax-Element-13">a^e \text{ mod } n</script>.</li>
<li>The operation may be implemented using the power operator <code>**</code> and the modulo operator <code>%</code>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">12345</code></div><div class="line number2 index1 alt1"><code class="python plain">n </code><code class="python keyword">=</code> <code class="python value">3071</code></div><div class="line number3 index2 alt2"><code class="python plain">e </code><code class="python keyword">=</code> <code class="python value">43</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"**"</code><code class="python plain">, e, </code><code class="python string">"mod"</code><code class="python plain">, n, </code><code class="python string">"="</code><code class="python plain">, a </code><code class="python keyword">*</code><code class="python keyword">*</code> <code class="python plain">e </code><code class="python keyword">%</code> <code class="python plain">n )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">12345 ** 43 mod 3071 = 2891</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>However, if the number is very large, the power operator will not be able to handle it. For example, when <code>n=33514648327550</code> and <code>e=5789177</code>, the VPL will not be able to handle the calculation. The code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">12345</code></div><div class="line number2 index1 alt1"><code class="python plain">n </code><code class="python keyword">=</code> <code class="python value">33514648327550</code></div><div class="line number3 index2 alt2"><code class="python plain">e </code><code class="python keyword">=</code> <code class="python value">5789177</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"**"</code><code class="python plain">, e, </code><code class="python string">"mod"</code><code class="python plain">, n, </code><code class="python string">"="</code><code class="python plain">, a </code><code class="python keyword">*</code><code class="python keyword">*</code> <code class="python plain">e </code><code class="python keyword">%</code> <code class="python plain">n )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
takes about 1 minute to complete.</li>
<li>For a even larger number, VPL may even fails to return a solution.</li>
<li>To solve the problem, we can use the <code>pow()</code> function instead. The <code>pow()</code> function takes a third parameter that performs the modulo operation. For example:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python plain">a </code><code class="python keyword">=</code> <code class="python value">12345</code></div><div class="line number2 index1 alt1"><code class="python plain">n </code><code class="python keyword">=</code> <code class="python value">33514648327550</code></div><div class="line number3 index2 alt2"><code class="python plain">e </code><code class="python keyword">=</code> <code class="python value">5789177</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">( a, </code><code class="python string">"**"</code><code class="python plain">, e, </code><code class="python string">"mod"</code><code class="python plain">, n, </code><code class="python string">"="</code><code class="python plain">, </code><code class="python functions">pow</code><code class="python plain">( a, e, n ) )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
will give you the result almost immediately.</li>
<li>The reason is that <code>pow()</code> function will compute power and modulo at the same time, which is much more efficient.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a4" class="anchor"></a><h2 id="key-generator">Key generator</h2><ul>
<li><p>When testing your code, you may need some pairs of RSA keys. Click the button below to launch the RSA key generator.</p>
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199517">Launch VPL</button>
</li>
<li><p>If you click on the save button and then click the run button <i class="fa fa-lg fa-rocket"></i> in the above VPL, you will receive a random pair of keys that you can use when you test your code.</p>
</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a5" class="anchor"></a><h2 id="task-1-rsa-encryption-1-">Task 1: RSA encryption (1%)</h2><ul>
<li>Define the function <code>rsaencrypt(value, n, e)</code> in <span>rsa.py</span> with three parameters, <code>value</code>, <code>n</code> and <code>e</code>.</li>
<li>Parameter <code>value</code> is a value to be encrypted.</li>
<li>Parameters <code>n</code> and <code>e</code> form the public key for the RSA encryption.</li>
<li>The function should encrypt the value using RSA public key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-14-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-177" style="width: 2.291em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.012em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1001.96em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-178"><span class="mo" id="MathJax-Span-179" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-180" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-181" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-182" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">e</span><span class="mo" id="MathJax-Span-183" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>n</mi><mo>,</mo><mi>e</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-14">(n, e)</script> and return the resulting code.</li>
<li>Once the function is implemented in <span>rsa.py</span>, you can test the funtion with the following code in <span>main.py</span>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">rsa </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">value </code><code class="python keyword">=</code> <code class="python value">100</code></div><div class="line number3 index2 alt2"><code class="python plain">n </code><code class="python keyword">=</code> <code class="python value">30360138080141</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div><div class="line number4 index3 alt1"><code class="python plain">e </code><code class="python keyword">=</code> <code class="python value">5510009</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div><div class="line number5 index4 alt2"><code class="python plain">code </code><code class="python keyword">=</code> <code class="python plain">rsaencrypt( value, n, e )</code></div><div class="line number6 index5 alt1"><code class="python functions">print</code><code class="python plain">( value, </code><code class="python string">"=&gt;"</code><code class="python plain">, code )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output of:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">100 =&gt; 15251238784560</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>You can assume that the parameters <code>value</code>, <code>n</code>, and <code>e</code> are always integers.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a6" class="anchor"></a><h2 id="task-2-rsa-decryption-0-5-">Task 2: RSA decryption (0.5%)</h2><ul>
<li>Define the function <code>rsadecrypt(value, n, d)</code> in <span>rsa.py</span> with three parameters, <code>value</code>, <code>n</code> and <code>d</code>.</li>
<li>Parameter <code>value</code> is a value to be encrypted.</li>
<li>Parameters <code>n</code> and <code>d</code> form the private key for the RSA decryption.</li>
<li>The function should decrypt and return the code using RSA private key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-15-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-184" style="width: 2.347em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.068em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.01em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-185"><span class="mo" id="MathJax-Span-186" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-187" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-188" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-189" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">d<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-190" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>n</mi><mo>,</mo><mi>d</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-15">(n, d)</script> and return the resulting value.</li>
<li>Once the function is implemented in <span>rsa.py</span>, you can test the funtion with the following code in <span>main.py</span>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">rsa </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">code </code><code class="python keyword">=</code> <code class="python value">15251238784560</code></div><div class="line number3 index2 alt2"><code class="python plain">n </code><code class="python keyword">=</code> <code class="python value">30360138080141</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div><div class="line number4 index3 alt1"><code class="python plain">d </code><code class="python keyword">=</code> <code class="python value">24201026397005</code></div><div class="line number5 index4 alt2"><code class="python plain">value </code><code class="python keyword">=</code> <code class="python plain">rsadecrypt( code, n, d )</code></div><div class="line number6 index5 alt1"><code class="python functions">print</code><code class="python plain">( code, </code><code class="python string">"=&gt;"</code><code class="python plain">, value )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output of:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">15251238784560 =&gt; 100</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>You can assume that the parameters <code>value</code>, <code>n</code>, and <code>d</code> are always integers.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a7" class="anchor"></a><h2 id="task-3-rsa-hacking-2-5-">Task 3: RSA hacking (2.5%)</h2><ul>
<li>Given a public key, e.g., (493, 11), if <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-16-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-191" style="width: 0.561em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.505em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.9em, 1000.5em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-192"><span class="mi" id="MathJax-Span-193" style="font-family: STIXGeneral-Italic;">n</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.628em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi></math></span></span><script type="math/tex" id="MathJax-Element-16">n</script> can be factorized, it is possible to derive a private key from the public key.</li>
<li>Define the function <code>rsahack(n, e)</code> in <span>rsa.py</span> with two parameters, <code>n</code> and <code>e</code>.</li>
<li>Parameter <code>n</code> and <code>e</code> form a public key for RSA encryption.</li>
<li>The function should try to factorize <code>n</code> and calculate the <code>d</code> that forms the private key.</li>
<li>Once the function is implemented in <span>rsa.py</span>, you can test the funtion with the following code in <span>main.py</span>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">rsa </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">n </code><code class="python keyword">=</code> <code class="python value">493</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </div><div class="line number3 index2 alt2"><code class="python plain">e </code><code class="python keyword">=</code> <code class="python value">11</code></div><div class="line number4 index3 alt1"><code class="python plain">d </code><code class="python keyword">=</code> <code class="python plain">rsahack( n, e )</code></div><div class="line number5 index4 alt2"><code class="python functions">print</code><code class="python plain">( n, </code><code class="python string">","</code><code class="python plain">, e, </code><code class="python string">"=&gt;"</code><code class="python plain">, d )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output of:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">493, 11 =&gt; 163</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>It is part of the assignment that you need to find out how the value of <code>d</code> can be calculated.</li>
<li>You can make use of the <code>mInverse()</code> function provided in the previous question to calculate the multiplicative inverse.</li>
<li>You can assume that the parameters <code>n</code>, and <code>e</code> are always integers, and <code>n</code> will be small enough to be easily factorized.</li>
</ul></article></section><section data-section="4" class="tut-section mdc-elevation--z2"><a id="s4" name="s4" class="anchor"></a><h1 id="written-question-12-">Written Question (12%)</h1><article class="mdc-elevation--z4"><a id="s4" name="s4a1" class="anchor"></a><h2 id="turnitin">Turnitin</h2><p>Click the button below to launch the Turnitin activity for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/turnitintooltwo/view.php?id=1199686">Launch Turnitin</button><ul>
<li>Please submit in <code>.docx</code> or <code>.pdf</code> format.</li>
<li>Hand-written answer may not be marked if they are not clearly visible. Note that Turnitin may not accept document without any detectable words. You can include a cover page to bypass such test.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s4" name="s4a2" class="anchor"></a><h2 id="notes-about-written-question">Notes about written question</h2><ul>
<li>When answering these questions, remember that you can make use of the Python sandbox or the <span>main.py</span> of the two VPLs in this assignment to run your Python program.</li>
<li>You should label your answer with the question number clearly.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s4" name="s4a3" class="anchor"></a><h2 id="question-related-to-affine-cipher-">Question related to Affine Cipher.</h2><p><strong>Q1</strong>. Let <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-17-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo&gt;&amp;#x2208;&lt;/mo&gt;&lt;msub&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-194" style="width: 6.755em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.03em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.03em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-195"><span class="mi" id="MathJax-Span-196" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-197" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-198" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">y</span><span class="mo" id="MathJax-Span-199" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-200" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">a</span><span class="mo" id="MathJax-Span-201" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-202" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">b</span><span class="mo" id="MathJax-Span-203" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">∈</span><span class="msubsup" id="MathJax-Span-204" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.509em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.67em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="texatom" id="MathJax-Span-205"><span class="mrow" id="MathJax-Span-206"><span class="mi" id="MathJax-Span-207" style="font-family: STIXGeneral-Regular;">ℤ</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.728em;"><span class="texatom" id="MathJax-Span-208"><span class="mrow" id="MathJax-Span-209"><span class="mn" id="MathJax-Span-210" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">26</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>,</mo><mi>y</mi><mo>,</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo>∈</mo><msub><mrow class="MJX-TeXAtom-ORD"><mi mathvariant="double-struck">Z</mi></mrow><mrow class="MJX-TeXAtom-ORD"><mn>26</mn></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-17">x, y, a, b \in \mathbb{Z}_{26}</script>. Is there any limitation to the choice of <code>a</code> and <code>b</code> in Affine Cipher? If so, what is it? (0.5%)</p><blockquote>
<p>Answer: gcd(a,26) = 1</p>
</blockquote><p><strong>Q2</strong>. If we perform a brute-force attack on Affine Cipher, what is the maximum number of pairs of values <code>(a, b)</code> will be tested? Show your calculation. (1%)</p><blockquote>
<p>Answer: <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-18-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;312&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-211" style="width: 6.643em; display: inline-block;"><span style="display: inline-block; position: relative; width: 5.918em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1005.92em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-212"><span class="mn" id="MathJax-Span-213" style="font-family: STIXGeneral-Regular;">12</span><span class="mo" id="MathJax-Span-214" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-215" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">26</span><span class="mo" id="MathJax-Span-216" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-217" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">312</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>12</mn><mo>×</mo><mn>26</mn><mo>=</mo><mn>312</mn></math></span></span><script type="math/tex" id="MathJax-Element-18">12 \times 26 = 312</script></p>
</blockquote><p><strong>Q3</strong>. Nancy suggests that we can increase the key space by removing the constraint of <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-19-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo&gt;&amp;#x2208;&lt;/mo&gt;&lt;msub&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi mathvariant=&quot;double-struck&quot;&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-218" style="width: 4.858em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.3em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.3em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-219"><span class="mi" id="MathJax-Span-220" style="font-family: STIXGeneral-Italic;">a</span><span class="mo" id="MathJax-Span-221" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-222" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">b</span><span class="mo" id="MathJax-Span-223" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">∈</span><span class="msubsup" id="MathJax-Span-224" style="padding-left: 0.338em;"><span style="display: inline-block; position: relative; width: 1.509em; height: 0px;"><span style="position: absolute; clip: rect(3.184em, 1000.67em, 4.188em, -999.997em); top: -4.015em; left: 0em;"><span class="texatom" id="MathJax-Span-225"><span class="mrow" id="MathJax-Span-226"><span class="mi" id="MathJax-Span-227" style="font-family: STIXGeneral-Regular;">ℤ</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span><span style="position: absolute; top: -3.848em; left: 0.728em;"><span class="texatom" id="MathJax-Span-228"><span class="mrow" id="MathJax-Span-229"><span class="mn" id="MathJax-Span-230" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">26</span></span></span><span style="display: inline-block; width: 0px; height: 4.021em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>,</mo><mi>b</mi><mo>∈</mo><msub><mrow class="MJX-TeXAtom-ORD"><mi mathvariant="double-struck">Z</mi></mrow><mrow class="MJX-TeXAtom-ORD"><mn>26</mn></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-19">a, b \in \mathbb{Z}_{26}</script>, so that there can be more possible values for <code>a</code> and <code>b</code>. Will Affine Cipher still work with such change? If so, explain how it will affect the key space. If not, explain why it does not work. (1.5%)</p><blockquote>
<p>Answer: Affine Cipher still work with such change. Key space will not be affected as <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-20-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mtext&gt;&amp;#xA0;mod&amp;#xA0;&lt;/mtext&gt;&lt;mn&gt;26&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-231" style="width: 24.222em; display: inline-block;"><span style="display: inline-block; position: relative; width: 21.599em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1021.54em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-232"><span class="mi" id="MathJax-Span-233" style="font-family: STIXGeneral-Italic;">a</span><span class="mi" id="MathJax-Span-234" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-235" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-236" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">b</span><span class="mtext" id="MathJax-Span-237" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mn" id="MathJax-Span-238" style="font-family: STIXGeneral-Regular;">26</span><span class="mo" id="MathJax-Span-239" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mo" id="MathJax-Span-240" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">(</span><span class="mo" id="MathJax-Span-241" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-242" style="font-family: STIXGeneral-Italic;">a</span><span class="mtext" id="MathJax-Span-243" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mn" id="MathJax-Span-244" style="font-family: STIXGeneral-Regular;">26</span><span class="mo" id="MathJax-Span-245" style="font-family: STIXGeneral-Regular;">)</span><span class="mi" id="MathJax-Span-246" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-247" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mo" id="MathJax-Span-248" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">(</span><span class="mi" id="MathJax-Span-249" style="font-family: STIXGeneral-Italic;">b</span><span class="mtext" id="MathJax-Span-250" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mn" id="MathJax-Span-251" style="font-family: STIXGeneral-Regular;">26</span><span class="mo" id="MathJax-Span-252" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-253" style="font-family: STIXGeneral-Regular;">)</span><span class="mtext" id="MathJax-Span-254" style="font-family: STIXGeneral-Regular;">&nbsp;mod&nbsp;</span><span class="mn" id="MathJax-Span-255" style="font-family: STIXGeneral-Regular;">26</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mtext>&nbsp;mod&nbsp;</mtext><mn>26</mn><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mtext>&nbsp;mod&nbsp;</mtext><mn>26</mn><mo stretchy="false">)</mo><mi>x</mi><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mtext>&nbsp;mod&nbsp;</mtext><mn>26</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>&nbsp;mod&nbsp;</mtext><mn>26</mn></math></span></span><script type="math/tex" id="MathJax-Element-20">a x + b \text{ mod } 26 = ((a \text{ mod } 26) x + (b \text{ mod } 26)) \text{ mod } 26</script>.</p>
</blockquote><p><strong>Q4</strong>. Click the button below to launch the VPL activity for this part of assignment. <button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1199257">Launch VPL</button></p><ul>
<li>Click on the save button and then click on the run button <i class="fa fa-lg fa-rocket"></i> and enter your student ID as prompted. </li>
<li>You will be provided with a pair of plaintext and ciphertext. </li>
<li>Given that the ciphertext is the result of applying Affine Cipher on the plaintext with an unknown key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-21-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-256" style="width: 2.347em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.068em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.01em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-257"><span class="mo" id="MathJax-Span-258" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-259" style="font-family: STIXGeneral-Italic;">a</span><span class="mo" id="MathJax-Span-260" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-261" style="font-family: STIXGeneral-Italic; padding-left: 0.17em;">b</span><span class="mo" id="MathJax-Span-262" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-21">(a, b)</script>. Illustrate how you can find the key <strong>without</strong> using the brute-force approach. You should show your steps in your answer. (3%)</li>
</ul><blockquote>
<p>Answer (tips): The easiest way is to find the corresponding cipher text of plaintext 'a' and 'b'.</p>
</blockquote></article><article class="mdc-elevation--z4"><a id="s4" name="s4a4" class="anchor"></a><h2 id="question-related-to-rsa-">Question related to RSA.</h2><p><strong>Q5</strong>. Explain what you have done in your implementation of <code>rsahack()</code> to find the value of <code>d</code> from the public key <code>(n, e)</code>. (1%)</p><blockquote>
<p>Answer (example): factorize <code>n</code> to <code>p</code> and <code>q</code>, calculate <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-22-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;&amp;#x03A6;&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-263" style="width: 6.03em; display: inline-block;"><span style="display: inline-block; position: relative; width: 5.36em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1005.36em, 2.905em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-264"><span class="mi" id="MathJax-Span-265" style="font-family: STIXGeneral-Regular;">Φ</span><span class="mo" id="MathJax-Span-266" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-267" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-268" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-269" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mi" id="MathJax-Span-270" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">p</span><span class="mo" id="MathJax-Span-271" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mi" id="MathJax-Span-272" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">q</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.309em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi></math></span></span><script type="math/tex" id="MathJax-Element-22">\Phi(n)=p \times q</script>, find <code>d = mInverse(e, n)</code>. </p>
</blockquote><p><strong>Q6</strong>. Suggest a way to validate that the value of <code>d</code> returned by <code>rsahack()</code> is correct. Illustrate your idea using public key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-23-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;493&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-273" style="width: 4.021em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.574em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1003.52em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-274"><span class="mo" id="MathJax-Span-275" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-276" style="font-family: STIXGeneral-Regular;">493</span><span class="mo" id="MathJax-Span-277" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-278" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">11</span><span class="mo" id="MathJax-Span-279" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mn>493</mn><mo>,</mo><mn>11</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-23">(493, 11)</script> and private key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-24-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;493&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;163&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-280" style="width: 4.579em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.076em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.02em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-281"><span class="mo" id="MathJax-Span-282" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-283" style="font-family: STIXGeneral-Regular;">493</span><span class="mo" id="MathJax-Span-284" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-285" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">163</span><span class="mo" id="MathJax-Span-286" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mn>493</mn><mo>,</mo><mn>163</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-24">(493, 163)</script>. (1.5%)</p><blockquote>
<p>Answer (example): try encrypting and decrypting a few values. </p>
</blockquote><p><strong>Q7</strong>. In tutorial 2, you are asked to write a program to check for prime numbers. While the trial division method (test if a number can be divided by some other numbers) is simple to implement and accurate, it is not used in RSA keys generation. Instead, <strong>Probabilistic tests</strong> which is not 100% accurate including the <strong>Fermat primality test</strong> and its variants are used. Research what these tests are and give two reasons why the inaccurate method are used in RSA key generation instead of the 100% accurate trial division method. (1.5%)</p><blockquote>
<p>Answer (example): probabilistic tests are faster; they are necessary to find large prime; etc.</p>
</blockquote><p><strong>Q8</strong>. Using the RSA encryption/decryption method introduced, why is result of encrypting the value of <samp>0</samp> and <samp>1</samp> not desirable? Suggest one way to overcome the problem. Illustrate your idea by encrypting and decrypting the value of 1 and 491, using public key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-25-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;493&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-287" style="width: 4.021em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.574em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1003.52em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-288"><span class="mo" id="MathJax-Span-289" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-290" style="font-family: STIXGeneral-Regular;">493</span><span class="mo" id="MathJax-Span-291" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-292" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">11</span><span class="mo" id="MathJax-Span-293" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mn>493</mn><mo>,</mo><mn>11</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-25">(493, 11)</script> and private key <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-26-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;493&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;163&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-294" style="width: 4.579em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.076em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.02em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-295"><span class="mo" id="MathJax-Span-296" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-297" style="font-family: STIXGeneral-Regular;">493</span><span class="mo" id="MathJax-Span-298" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-299" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">163</span><span class="mo" id="MathJax-Span-300" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mn>493</mn><mo>,</mo><mn>163</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-26">(493, 163)</script>. State also if there is any drawback in using your suggested method. (2%)</p><blockquote>
<p>Answer (example): 0 and 1 will be encrypted to the same value using RSA. Padding is needed. </p>
</blockquote></article></section><section class="tut-section-credit"><p>Created by Kevin Lam (yklam2@cs), supervised by Dirk (sdirk@cs), for the course ENGG1202B, HKU, year 2017-2018</p></section></main></div><aside id="update-dialog" class="mdc-dialog" role="alertdialog" aria-labelledby="update-dialog-label" aria-describedby="update-dialog-description"><div class="mdc-dialog__surface"><header class="mdc-dialog__header"><h2 id="update-dialog-label" class="mdc-dialog__header__title">This page is updated.</h2></header><section id="update-dialog-description" class="mdc-dialog__body">A new version of this page is now available, the page will be reloaded.</section><footer class="mdc-dialog__footer"><button type="button" class="mdc-button mdc-dialog__footer_button mdc-dialog__footer__button--accept">Reload page</button></footer></div><div class="mdc-dialog__backdrop"></div></aside><div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-family: STIXSizeOneSym, sans-serif;"></div></div></body></html>