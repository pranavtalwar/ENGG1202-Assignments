<!DOCTYPE html>
<!-- saved from url=(0078)http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a2.html#s1 -->
<html class="gr__moodle_hku_hk"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="./Assignment 2_files/tut-loader.js"></script>
    <script>
      TutLoader({
        title: "Assignment 2 (Due: April 19, 2018 23:55)",
        links: {
          'Python Homepage': 'https://www.python.org/',
          'Course Moodle': 'http://moodle.hku.hk/course/view.php?id=54545',
          'Python Sandbox': 'http://moodle.hku.hk/mod/vpl/view.php?id=1163078'
        },
        credit: "Created by Kevin Lam (yklam2@cs), supervised by Dirk (sdirk@cs), for the course ENGG1202B, HKU, year 2017-2018"
      });
    </script>
  <script src="./Assignment 2_files/es6-shim.min.js"></script><link rel="stylesheet" href="./Assignment 2_files/material-components-web.min.css"><link rel="stylesheet" href="./Assignment 2_files/css"><link rel="stylesheet" href="./Assignment 2_files/icon"><link rel="stylesheet" href="./Assignment 2_files/font-awesome.min.css"><link rel="stylesheet" href="./Assignment 2_files/theme.css"><link rel="stylesheet" href="./Assignment 2_files/style.css"><script src="./Assignment 2_files/underscore-min.js"></script><script src="./Assignment 2_files/quickDOM.js"></script><script src="./Assignment 2_files/worker.js"></script><script src="./Assignment 2_files/material-components-web.min.js"></script><title>Assignment 2 (Due: April 19, 2018 23:55)</title><script src="./Assignment 2_files/marked.min.js"></script><script src="./Assignment 2_files/syntaxhighlighter.js"></script><script src="./Assignment 2_files/MathJax.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!important; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Blank; src: url('about:blank')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>
  <body data-gr-c-s-loaded="true"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
<script id="mdcontent" type="text/markdown" style="display: none;">
# Overview
## Changelog
> This section will list all important changes made after the release of assignment. Announcement will also be made on Moodle when there is such a change.
- **[2018-03-26]** Updated the heuristic calculation of `(0, 1, 2, 3, 4, 5)` in programming part 2.
- **[2018-04-11]** Added a simple version for the given state in Written part Q4.

## About the assignment
- In this assignment you will implement a few Python programs related to **searching**, and answer a few questions related to them.
- You are expected to complete tutorial 1 to 5 before working on this assignment.
- You are not alone! If you find yourself stuck on something, send an email to Kevin and CC to Dirk for help. We want this assignment to be rewarding and instructional, not frustrating and demoralizing. But, we don't know when or how to help unless you ask.
- This assignment was designed by Kevin Lam. If you have any questions regarding this assignment, please send an email to Kevin and CC to Dirk.

## Submission
- You will receive **zero marks** if you submit after the deadline.
- For programming tasks, please submit it through the provided link to VPL. Your work is **automatically submitted** when you save your work in VPL.
- For written tasks, please submit it through the provided link to the Turnitin assignment activity.

## Plagiarism
- We will be checking your work against other submissions in the class and from the internet for logical redundancy. If you copy someone else's work and submit it with minor changes, we will know. We trust you all to submit your own work only; please don't let us down. If you do, we will pursue the **strongest consequences** available to us.
- Please be careful not to post spoilers to discussion forum. Please don't post any code that is directly related to the assignments. However you are welcome and encouraged to discuss general ideas on the discussion forums.

## Grading
- We will use an auto-grader to grade your program, please read the instructions in this document carefully to make sure that your program will pass the autograder.
- The evaluation function in the VPL will test your code for the **minimum requirement**. Your code must at least pass the test in the evaluation to get marks.
- The **correctness** of your implementation -- not the auto-grader's judgements -- will be the final judge of your score. If necessary, we will review and grade assignments individually to ensure that you receive due credit for your work.
- We will test your program with **additional test cases** apart from those included in the evaluation function.

## Sandbox
- There is a link to "Python Sandbox" in the menu of every tutorial, you could use it to test any Python code if needed.

# Programming Part 1: Local search (4%)
## VPL for this part

Click the button below to launch the VPL for this part of assignment.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1212946">Launch VPL</button>

- Please define the required functions in <span>nqueen.py</span>. This file will be tested by the auto-grader.
- You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.

## The n-Queen problem
- We have discussed the 8-queen problem in the lecture. In this question, you are required to implement a few functions as part of the effort in solving the n-queen problem.
- To solve for the n-queen problem, we start from an initial state and move the queens until a solution is found.
- As our target is to find a configuration that no pairs of queen are on the same row, column and diagonal line, we can limit our initial state to have one queen in each row and allow only horizontal movement for each queen.
- For example, one possible initial state for a 4-queen problem will be:
```
Q - - -
Q - - -
Q - - -
Q - - -
```
- Since we have only one queen in each row, we can use a tuple of 4 numbers, `(0, 0, 0, 0)` to represent the above initial state, where each value represents the horizontal position of the queen in a row.
- Using this representation, `(0, 1, 2, 3)` represents the configuration of:
```
Q - - -
- Q - -
- - Q -
- - - Q
```
and `(2, 0, 3, 1)` represents the configuration of:
```
- - Q -
Q - - -
- - - Q
- Q - -
```
which is one of the possible solution to a 4-queen problem.
- Larger board can be represented with a longer list, so for example, `(0, 1, 2, 3, 0, 1, 2, 3)` represents the board:
```
Q - - - - - - -
- Q - - - - - -
- - Q - - - - -
- - - Q - - - -
Q - - - - - - -
- Q - - - - - -
- - Q - - - - -
- - - Q - - - -
```
- To help visualizing the above representation, we can write a simple function to help printing the list as a board.
```python
def printBoard(queen):
  for n in queen:
    print("- "*n+"Q"+" -"*(len(queen)-n-1))
```
You are encouraged to make use of this function in testing your code, and modify it for your own purpose.

## Task 1: The attack matrix (1%)

- Consider the board `(0, 3, 2, 1)`. We have 16 possible ways to move one queen, where only 12 of them are valid moves, producing 12 different boards.
- If we count the number of attacking pairs of these moves, we have:
  1. Queen 0 to column 0: (not valid)
  1. Queen 0 to column 1: `(1, 3, 2, 1)`, count: <samp>4</samp>
  1. Queen 0 to column 2: `(2, 3, 2, 1)`, count: <samp>5</samp>
  1. Queen 0 to column 3: `(3, 3, 2, 1)`, count: <samp>4</samp>
  1. Queen 1 to column 0: `(0, 0, 2, 1)`, count: <samp>3</samp>
  1. Queen 1 to column 1: `(0, 1, 2, 1)`, count: <samp>5</samp>
  1. Queen 1 to column 2: `(0, 2, 2, 1)`, count: <samp>3</samp>
  1. Queen 1 to column 3: (not valid)
  1. Queen 2 to column 0: `(0, 3, 0, 1)`, count: <samp>3</samp>
  1. Queen 2 to column 1: `(0, 3, 1, 1)`, count: <samp>2</samp>
  1. Queen 2 to column 2: (not valid)
  1. Queen 2 to column 3: `(0, 3, 3, 1)`, count: <samp>2</samp>
  1. Queen 3 to column 0: `(0, 3, 2, 0)`, count: <samp>3</samp>
  1. Queen 3 to column 1: (not valid)
  1. Queen 3 to column 3: `(0, 3, 2, 2)`, count: <samp>3</samp>
  1. Queen 3 to column 4: `(0, 3, 2, 3)`, count: <samp>5</samp>
- If we put these numbers on the board, at the position where the queen was moved to, the result will be:
```
-  4  5  4
3  5  3  -
3  2  -  2
3  -  3  5
```
- We can see that by moving the queen at row 2 to position 1 or 3, we will get the smallest attacking count among the 12 possible moves.
Let's call this the attack matrix.
- For any board, we can count the number of pairs of attacking queens using this function:
```python
def countAttack(queen):
    count = 0
    for row1 in range( 0, len(queen) ):
        for row2 in range( row1 + 1, len( queen ) ):
            if queen[row1] == queen[row2]:
                count += 1
            elif abs(queen[row1] - queen[row2]) == (row2 - row1):
                count += 1
    return count
```
You can use the above function in this and the following tasks.
- For this task, define the function `printMatrix(queen)` in <span>nqueen.py</span> with one parameter, `queen`.
- Parameter `queen` is a tuple representing a n-queen problem as described above.
- The function should print the corresponding attack matrix, with each value occupying 2 spaces, left-aligned.
- For example, you can test your function in <span>main.py</span> using the following code:
```python
from nqueen import *
printMatrix( (0, 3, 2, 1) )
```
which produces the output:
```
-  4  5  4
3  5  3  -
3  2  -  2
3  -  3  5
```
- Not that your function should be able to handle boards of different sizes, e.g.,
```python
from nqueen import *
printMatrix( (0, 3, 2, 1, 0, 3, 2, 1) )
```
should produce the output:
```
-  16 17 16 18 14 14 14
14 16 14 -  12 12 12 15
15 13 -  13 12 11 14 11
13 -  13 15 11 15 11 11
-  13 15 13 16 11 12 11
14 16 14 -  12 14 12 13
15 14 -  14 14 12 14 12
15 -  15 17 13 15 13 15
```
- You can assume that the input `queen` is always a valid board, with all values less than the size of board.
- You can assume that the board will not exceed the size of 8.

## Task 2: move one queen (1%)
- Judging from the attack matrix shown for `(0, 3, 2, 1)` in the previous part, the lowest possible attack count of moving one queen will be <samp>2</samp>.
- To solve a board using the local search method, we move one queen at a time based on the current best move. In this case, we will move queen 2 to position 1 or 3.
- Define the function `moveOne(queen)` in <span>nqueen.py</span> with one parameter, `queen`.
- Parameter `queen` is a tuple representing a n-queen problem as described above.
- The function should **always** move one queen based on the attack matrix and return the result.
- For example, for the case of `(0, 3, 2, 1)`, the function should return either `(0, 3, 1, 1)` or `(0, 3, 3, 1)`.
- The function should still move a queen if the move results in a higher attacking count.
- For example, you can test your function in <span>main.py</span> using the following code:
```python
from nqueen import *
queen1 = (0, 3, 2, 1)
queen2 = moveOne( queen1 )
printBoard(queen2)
```
which produces the output:
```
Q - - -
- - - Q
- Q - -
- Q - -
```
Note the use of `printBoard()` function provided at the beginning of this part of assignment.
- You can assume that the input `queen` is always a valid board, with all values less than the size of board.


## Task 3: The attack matrix II (1%)
- Suppose we further restrict the initial state so that no pair of queens are on the same row or the same column. Using the same representation, all values in the list will be distinct. For example, `(1, 2, 0, 3)` is a valid board:
```
- Q - -
- - Q -
Q - - -
- - - Q
```
- Under such restriction, when we move one queen to a column, we have to swap the column position of such queen with the queen at the target column. For example, in the above case, if we move the queen at row 0 to column 0, we need to move the queen at row 2 to column 1:
```
- Q - -       Q - - -     Q - - -
- - Q -  -->  - - Q -  -> - - Q -
Q - - -       Q - - -     - Q - -
- - - Q       - - - Q     - - - Q
```
- The above operation is equivalent to a swap of position between queen 0 and queen 2. The board change from `(1, 2, 0, 3)` to `(0, 2, 1, 3)`.
- Now we can repeat what we have done in the previous tasks.
- Consider the board `(0, 3, 2, 1)`, we have 12 possible swaps, which produce 12 boards.
- If we count the number of attacking pairs of these swaps, we have:
  1. Queen 0 with queen 0: (not a swap)
  1. Queen 0 with queen 1: `(3, 0, 2, 1)`, count: <samp>1</samp>
  1. Queen 0 with queen 2: `(2, 3, 0, 1)`, count: <samp>4</samp>
  1. Queen 0 with queen 3: `(1, 3, 2, 0)`, count: <samp>1</samp>
  1. Queen 1 with queen 0: `(3, 0, 2, 1)`, count: <samp>1</samp>
  1. Queen 1 with queen 1: (not a swap)
  1. Queen 1 with queen 2: `(0, 2, 3, 1)`, count: <samp>1</samp>
  1. Queen 1 with queen 3: `(0, 1, 2, 3)`, count: <samp>6</samp>
  1. Queen 2 with queen 0: `(2, 3, 0, 1)`, count: <samp>4</samp>
  1. Queen 2 with queen 1: `(0, 2, 3, 1)`, count: <samp>1</samp>
  1. Queen 2 with queen 2: (not a swap)
  1. Queen 2 with queen 3: `(0, 3, 1, 2)`, count: <samp>1</samp>
  1. Queen 3 with queen 0: `(1, 3, 2, 0)`, count: <samp>1</samp>
  1. Queen 3 with queen 1: `(0, 1, 2, 3)`, count: <samp>6</samp>
  1. Queen 3 with queen 2: `(0, 3, 1, 2)`, count: <samp>1</samp>
  1. Queen 3 with queen 3: (not a swap)
- The corresponding attack matrix will be:
```
-  1  4  1
1  -  1  6
4  1  -  1
1  6  1  -
```
- Define the function `printMatrix2(queen)` in <span>nqueen.py</span> with one parameter, `queen`.
- Parameter `queen` is a list representing a n-queen board as described above.
- The function should print the corresponding attack matrix of swapping 2 queens as explained above, with each value occupying 2 spaces, left-aligned.
- For example, you can test your function in <span>main.py</span> using the following code:
```python
from nqueen import *
printMatrix2( (0, 3, 2, 1) )
```
which produces the output:
```
-  1  4  1
1  -  1  6
4  1  -  1
1  6  1  -
```
- Similar to the first task, your function should be able to handle boards of different sizes, e.g.,
```python
from nqueen import *
printMatrix2( (0, 3, 2, 1, 7, 6, 5, 4) )
```
should produce the output:
```
-  9  10 9  9  6  6  9
9  -  9  12 6  6  6  6
10 9  -  9  5  5  5  5
9  12 9  -  6  6  6  6
9  6  5  6  -  8  8  10
6  6  5  6  8  -  10 8
6  6  5  6  8  10 -  8
9  6  5  6  10 8  8  -
```
- You can assume that the input `queen` is always a valid board, with all values distinct and less than the size of board.

## Task 4: swap queens (1%)
- Similar to task 2, define the function `moveTwo(queen)` in <span>nqueen.py</span> with one parameter, `queen`.
- Parameter `queen` is a list representing a n-queen problem as described above.
- The function should **always** move two queens as described in task 3.
- For example, for the case of `(0, 3, 2, 1)`, the function should return either `(1, 3, 2, 0)`, `(3, 0, 2, 1)`, or any other board with an attacking count of 1 after swapping the position of two queens.
- The function should still move two queens if the move results in a higher attacking count.
- For example, you can test your function in <span>main.py</span> using the following code:
```python
from nqueen import *
queen1 = (0, 3, 2, 1)
queen2 = moveTwo( queen1 )
printBoard(queen2)
```
which produces the output:
```
- - - Q
Q - - -
- - Q -
- Q - -
```
- You can assume that the input `queen` is always a valid board, with all values distinct and less than the size of board.
- You can assume that the board will not exceed the size of 8.

# Programming part 2: A* search (4%)
## VPL for this part

Click the button below to launch the VPL for this part of assignment.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1214092">Launch VPL</button>

- Please define the required functions in <span>sortballs.py</span>. This file will be tested by the auto-grader.
- You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.

## A sorting system

- A factory manufacturing numbered balls has a system that pack 5 balls into a package, where the package is simply a long tube holding the 5 balls.
- The system has a temporary holder holding the balls and will place the balls into the package one by one. For example, at one point the package is holdering 3 of the balls and the holder holds the remaining 5, which can be illustrated like this:
<table><tr><td>Holder</td><td style="width: 8em;border-top: 1pt solid black; border-bottom: 1pt solid black; text-align: right">④⑤③</td><td style="width: 8em;border-top: 1pt solid black; border-bottom: 1pt solid black; border-right: 1pt solid black; text-align: right">②①</td><td>Package</td></tr></table>
- It can also be represented as a tuple, with value <samp>0</samp> representing the boundary between the holder and the package:
```
(4, 5, 3, 0, 2, 1)
```
- While packaging these balls, the system will sort the balls in ascending order. However, the system can only perform the following operations:
  - **`PUSH`**: push one ball from the holder to the package, e.g., `(4, 5, 3, 0, 2, 1)` will becomes `(4, 5, 0, 3, 2, 1)`.
  - **`PULL`**: pull one ball from the package back to the holder, e.g., `(4, 5, 3, 0, 2, 1)` will becomes `(4, 5, 3, 2, 0, 1)`.
  - **`SWAP`**: swap the last two balls in the holder, `(4, 5, 3, 0, 2, 1)` will becomes `(4, 3, 5, 0, 2, 1)`.
  - **`FLIP`**: flip all balls in the package, e.g., `(4, 5, 3, 0, 2, 1)` will becomes `(4, 5, 3, 0, 1, 2)`.
- For example, if the initial state is `(2, 5, 4, 1, 3, 0)`, the system may sort the balls in this way:
```
FROM: (2, 5, 4, 1, 3, 0)
SWAP: (2, 5, 4, 3, 1, 0)
PUSH: (2, 5, 4, 3, 0, 1)
PUSH: (2, 5, 4, 0, 3, 1)
PUSH: (2, 5, 0, 4, 3, 1)
PUSH: (2, 0, 5, 4, 3, 1)
FLIP: (2, 0, 1, 3, 4, 5)
PULL: (2, 1, 0, 3, 4, 5)
SWAP: (1, 2, 0, 3, 4, 5)
PUSH: (1, 0, 2, 3, 4, 5)
PUSH: (0, 1, 2, 3, 4, 5)
```
Opertions: 5 PUSH, 1 PULL, 2 SWAP, 1 FLIP
- Another possible solution will be:
```
FROM: (2, 5, 4, 1, 3, 0)
PUSH: (2, 5, 4, 1, 0, 3)
SWAP: (2, 5, 1, 4, 0, 3)
PUSH: (2, 5, 1, 0, 4, 3)
SWAP: (2, 1, 5, 0, 4, 3)
PUSH: (2, 1, 0, 5, 4, 3)
SWAP: (1, 2, 0, 5, 4, 3)
FLIP: (1, 2, 0, 3, 4, 5)
PUSH: (1, 0, 2, 3, 4, 5)
PUSH: (0, 1, 2, 3, 4, 5)
```
Opertions: 5 PUSH, 0 PULL, 3 SWAP, 1 FLIP
- Different operation needs a different amount of time to complete, for instance:
  - **`PUSH`**: 10 unit of time
  - **`PULL`**: 5 unit of time
  - **`SWAP`**: 17 unit of time
  - **`FLIP`**: 8 unit of time
- Therefore the two solutions above takes \\(5 \times 10 + 1 \times 5 + 2 \times 17 + 1 \times 8 = 107\\) and \\(5 \times 10 + 3 \times 17 + 1 \times 8 = 109\\) unit of time respectively, i.e., the first solution is a better one.

## Task 1: apply move
- Define the function `applyMove(state, move)` in <span>sortballs.py</span> with two parameters, `state`, and `move`.
- Parameter `state` is a tuple representing a situation as described above.
- Parameter `move` is a string, which can be either "PUSH", "PULL", "SWAP", or "FLIP", representing the 4 operations described above.
- The function should return a new state by applying the specified move as described above.
- For example, if state is `(2, 0, 1, 3, 4, 5)` and the move is `PUSH`, the function should return `(0, 2, 1, 3, 4, 5)`. It can be tested using the following code in <span>main.py</span>:
```python
from sortballs import *
state = (2, 0, 1, 3, 4, 5)
move = 'PUSH'
print(applyMove(state, move))
```
which produces the output:
```
(0, 2, 1, 3, 4, 5)
```
- If the specific move is not possible, e.g., there is no ball in the holder to swap, the function return a state that is identical to the input state. For example:
```python
from sortballs import *
state = (2, 0, 1, 3, 4, 5)
move = 'SWAP'
print(applyMove(state, move))
```
which produces the output:
```
(2, 0, 1, 3, 4, 5)
```
- You can assume that the input `state` is always a valid state, i.e., a tuple with values 0 to 5 in any order;
- You can assume that the input `move` is always a string of either 'PUSH', 'PULL, 'SWAP', or 'FLIP'.


## Task 2: heuristic
- Define the functon `h(state)` in <span>sortballs.py</span> with one parameter, `state`.
- Parameter `state` is a tuple representing a situation as described above.
- The function should evaluate the state and return a heuristic in the following ways:
  - Calculate value \\(A\\) = number of balls in the holder \\(\times\\) cost of `PUSH` operation.
  - Calculate value \\(B\\) = number of balls that is on the right of at least one ball with a greater value using the tuple representation described above.
  - Calculate value \\(C\\) = number of balls that is on the left of at least one ball with a greater value using the tuple representation described above.
  - Calculate value \\(D\\) = the minimum of:
    1) value \\(B\\) \\(\times\\) cost of `SWAP` operation, and
    2) cost of `FLIP` operation \\(+\\) (value \\(C\\) \\(\times\\) cost of `SWAP` operation).
  - return the value of \\(A\\) + value of \\(D\\) as the heuristic.
- For example, to find the heuristic of `(2, 5, 4, 1, 3, 0)`:
  - \\(A = 5 \times 10 = 50\\)
  - \\(B = 3\\) (ball 4, 1, and 3)
  - \\(C = 2\\) (ball 1, and 2)
  - \\(D = min(3 \times 17, 2 \times 17 + 8) = 42\\)
  - return \\(A + D = 92\\)
- You can test your function with the following code in <span>main.py</span>
```python
from sortballs import *
state = (2, 5, 4, 1, 3, 0)
print(h(state))
```
which produces the output of <samp>92</samp>
- Another example, to find the heuristic of `(2, 5, 4, 0, 3, 1)`:
  - \\(A = 3 \times 10 = 30\\)
  - \\(B = 3\\) (ball 4, 3 and 1)
  - \\(C = 1\\) (ball 2)
  - \\(D = min(3 \times 17, 1 \times 17 + 8) = 25\\)
  - return \\(A + D = 55\\)
- One last example, to find the heuristic of `(0, 1, 2, 3, 4, 5)`:
  - \\(A = 0 \times 10 = 0\\)
  - \\(B = 0\\)
  - \\(C = 4\\) (ball 1, 2, 3, and 4)
  - \\(D = min(0, 4 \times 17 + 8) = 0\\)
  - return \\(A + D = 0\\)  (Goal state)
- You can assume that the input `state` is always a valid state, i.e., a tuple with values 0 to 5 in any order.


## Task 3: get next move
- Define the function `getNext(frontier)` in <span>sortballs.py</span> with one parameter, `frontier`.
- Parameter `frontier` is a list of dictionary, each consists of two values, `state` and `path`.
- For every `item` in `frontier`:
  - `item['state']` is a tuple representing a situation as described above.
  - `item['path']` is the list of operations that leads to the state `item['state']`.
- Your function should **remove** and **return* one item from the frontier, for the purpose of using A-star search to find the fastest operation needed to produce a sorted package.
- You can use the following code in <span>main.py</span> to test your code:
```python
from sortballs import *
frontier = [
  { 'state': (2, 5, 4, 3, 0, 1), 'path': [ 'PULL' ] },
  { 'state': (2, 4, 5, 0, 3, 1), 'path': [ 'SWAP' ] },
  { 'state': (2, 5, 4, 0, 1, 3), 'path': [ 'FLIP' ] },
  { 'state': (2, 0, 5, 4, 3, 1), 'path': [ 'PUSH', 'PUSH' ] },
  { 'state': (2, 5, 4, 0, 3, 1), 'path': [ 'PUSH', 'PULL' ] },
  { 'state': (5, 2, 0, 4, 3, 1), 'path': [ 'PUSH', 'SWAP' ] },
  { 'state': (2, 5, 0, 1, 3, 4), 'path': [ 'PUSH', 'FLIP' ] },
]
print("Before getNext:")
for f in frontier:
  print(f)
item = getNext(frontier)
print("getNext: ", item)
print("After getNext:")
for f in frontier:
  print(f)
```
which produces the output:
```
Before getNext:
{'state': (2, 5, 4, 3, 0, 1), 'path': ['PULL']}
{'state': (2, 4, 5, 0, 3, 1), 'path': ['SWAP']}
{'state': (2, 5, 4, 0, 1, 3), 'path': ['FLIP']}
{'state': (2, 0, 5, 4, 3, 1), 'path': ['PUSH', 'PUSH']}
{'state': (2, 5, 4, 0, 3, 1), 'path': ['PUSH', 'PULL']}
{'state': (5, 2, 0, 4, 3, 1), 'path': ['PUSH', 'SWAP']}
{'state': (2, 5, 0, 1, 3, 4), 'path': ['PUSH', 'FLIP']}
getNext:  {'state': (2, 0, 5, 4, 3, 1), 'path': ['PUSH', 'PUSH']}
After getNext:
{'state': (2, 5, 4, 3, 0, 1), 'path': ['PULL']}
{'state': (2, 4, 5, 0, 3, 1), 'path': ['SWAP']}
{'state': (2, 5, 4, 0, 1, 3), 'path': ['FLIP']}
{'state': (2, 5, 4, 0, 3, 1), 'path': ['PUSH', 'PULL']}
{'state': (5, 2, 0, 4, 3, 1), 'path': ['PUSH', 'SWAP']}
{'state': (2, 5, 0, 1, 3, 4), 'path': ['PUSH', 'FLIP']}
```
- Note that the number of items in the frontier is reduced by 1 after `getNext()`.
- You can assume that the input `frontier` is always a list of dictionary, each with a valid `state` (a tuple of values 0-5) and valid `path` (a list of moves).


# Written Question (12%)
## Turnitin
Click the button below to launch the Turnitin activity for this part of assignment.
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/turnitintooltwo/view.php?id=1214424">Launch Turnitin</button>

- Please submit in <code>.docx</code> or <code>.pdf</code> format.
- Hand-written answer may not be marked if they are not clearly visible. Note that Turnitin may not accept document without any detectable words. You can include a cover page to bypass such test.

## Notes about written question
- When answering these questions, remember that you can make use of the Python sandbox or the <span>main.py</span> of the two VPLs in this assignment to run your Python program.
- You should label your answer with the question number clearly.

## Question related to Local Search.
**Q1**. With the functions defined in programming part 1, we can implement the local search algorithm as follow.
```python
def localSearch(queen):
  while countAttack(queen) > 0:
    queen = moveOne(queen)

  printBoard(queen)
```
or if `moveTwo(queen)` is used instead:
```python
def localSearch2(queen):
  while countAttack(queen) > 0:
    queen = moveTwo(queen)

  printBoard(queen)
```
Making use of the functions above, analyse and compare the performance of solving the n-queen problem with local search algorithm using `moveOne()` and `moveTwo()`.

Comparison should be done based on:
- the number of times `moveOne()`/`moveTwo()` is executed for different initial boards and board size, and
- the ability of `moveOne()`/`moveTwo()` reaching the solution within the execution time limit for different initial boards and board size.

You may modify the two functions for better analysis.

**Q2**. Consider the local search method using function `moveOne()` only, sometimes the search is not able to find a solution within the exeuction time limit. Do you think the search will be successful if a longer execution time is allowed? Why?

**Q3**. Discuss one similarity and one dissimilarity of the local search method with:
  1. BFS
  2. DFS
  3. UCS

## Question related to A* Search.
**Q4**. Click the button below to launch the VPL activity for this part of assignment.

<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1214532">Launch VPL</button>

- Click on the save button and then click on the run button <i class="fa fa-lg fa-rocket"></i> and enter your student ID as prompted.
- You will be provided with an initial state of the problem described in programming part 2.
- With the functions defined in your programming tasks, we can implement the A*-TSA as follow.
```python
def astarSearch(state):
  # initialize frontier using initial state of problem
  frontier = [ { 'state': state, 'path': [] } ]
  # while frontier is not empty
  while len(frontier) > 0:
    # choose a leaf node and remove it from frontier
    node = getNext(frontier)

    # if node contains a goal state
    if h(node['state']) == 0:
      # return corresponding solution
      return node['path']

    # expand the node adding the resulting nodes to the frontier
    for move in [ 'PUSH', 'PULL', 'SWAP', 'FLIP' ]:
      frontier.append( { 'state': applyMove(node['state'], move), 'path': node['path'] + [ move ] } )

  # return None if no solution is found
  return None
```
Find the solution to the given initial state using the function above. Calculate the cost of the solution.
- If in case your program cannot solve the given state, you can use this VPL instead:
<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1230163">Launch VPL</button>
- If your program is unable to solve the simpler state, you can solve the state manually. In this case, your answer do not need to be the best solution. Please state that clearly in your answer if you are solving it manually. Marks will be given if your program is working correctly.


**Q5**. Suppose the number of balls is reduced to 3. Draw a state space graph similar to the one shown in p.16 of lecture notes **2 Search** with all possible states.

**Q6**. If the number of balls is `N`, what is the size of the search space (i.e., number of stats in the state space graph)?

**Q7**. James wants to simplify the heuristic calculation.
- He suggests the following change:
  - Calculate value \\(P\\) = number of balls in the holder \\(\times\\) cost of `PUSH`
  - Calculate value \\(Q\\) = number of balls in the holder that is on the right of at least one ball with a greater value \\(\times\\) cost of `PULL`
  - Calculate value \\(R\\) = number of balls in the package that is on the right of at least one ball with a greater value \\(\times\\) (cost of `PULL` \\(+\\) cost of `PUSH`)
  - return the value of \\(P + Q + R\\) as the heuristic
- For example, to find the heuristic of `(2, 5, 4, 1, 3, 0)`:
  - \\(P = 5 \times 10 = 50\\)
  - \\(Q = 3 \times 5 = 15 \\) (ball 4, 1, and 3)
  - \\(R = 0 \times (10 + 5) = 0 \\)
  - return \\(P + Q + R = 65\\)
- Another example, to find the heuristic of `(2, 5, 4, 0, 3, 1)`:
  - \\(P = 3 \times 10 = 30\\)
  - \\(Q = 1 \times 5 = 5\\) (ball 4)
  - \\(R = 2 \times (10 + 5) = 30\\) (ball 3 and 1)
  - return \\(P + Q + R = 65\\)
- One last example, to find the heuristic of `(0, 1, 2, 3, 4, 5)`:
  - \\(P = 0 \times 10 = 0\\)
  - \\(Q = 0 \times 5 = 0\\)
  - \\(R = 0 \times (10 + 5) = 0\\)
  - return \\(P + Q + R = 0\\)  (Goal state)

Is this heuristic admissible? Explain your answer.

</script>
  

<header class="mdc-toolbar mdc-toolbar--fixed"><div class="mdc-toolbar__row"><section class="mdc-toolbar__section mdc-toolbar__section--align-start"><a id="toolbar-menu" class="material-icons mdc-toolbar__menu-icon" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a2.html#">menu</a><span class="mdc-toolbar__title">Assignment 2 (Due: April 19, 2018 23:55)</span></section></div></header><div id="sidenav-content" class="mdc-toolbar-fixed-adjust"><aside id="sidenav" class="mdc-drawer mdc-temporary-drawer mdc-typography" style="--mdc-temporary-drawer-opacity:0;"><nav class="mdc-temporary-drawer__drawer"><div class="mdc-list-group"><nav id="sidenav-nav" class="mdc-list"><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a2.html#s1">Overview</a><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a2.html#s2">Programming Part 1: Local search (4%)</a><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a2.html#s3">Programming part 2: A* search (4%)</a><a class="mdc-list-item" href="http://moodle.hku.hk/pluginfile.php/1779782/mod_resource/content/23/a2.html#s4">Written Question (12%)</a></nav><hr class="mdc-list-divider"><nav id="sidenav-links" class="mdc-list"><a class="mdc-list-item" href="https://www.python.org/" rel="external" data-mdc-tabindex-handled="true" tabindex="-1">Python Homepage</a><a class="mdc-list-item" href="http://moodle.hku.hk/course/view.php?id=54545" rel="external" data-mdc-tabindex-handled="true" tabindex="-1">Course Moodle</a><a class="mdc-list-item" href="http://moodle.hku.hk/mod/vpl/view.php?id=1163078" rel="external" data-mdc-tabindex-handled="true" tabindex="-1">Python Sandbox</a></nav></div></nav></aside><main><section data-section="1" class="tut-section mdc-elevation--z2"><a id="s1" name="s1" class="anchor"></a><h1 id="overview">Overview</h1><article class="mdc-elevation--z4"><a id="s1" name="s1a1" class="anchor"></a><h2 id="changelog">Changelog</h2><blockquote>
<p>This section will list all important changes made after the release of assignment. Announcement will also be made on Moodle when there is such a change.</p>
<ul>
<li><strong>[2018-03-26]</strong> Updated the heuristic calculation of <code>(0, 1, 2, 3, 4, 5)</code> in programming part 2.</li>
<li><strong>[2018-04-11]</strong> Added a simple version for the given state in Written part Q4.</li>
</ul>
</blockquote></article><article class="mdc-elevation--z4"><a id="s1" name="s1a2" class="anchor"></a><h2 id="about-the-assignment">About the assignment</h2><ul>
<li>In this assignment you will implement a few Python programs related to <strong>searching</strong>, and answer a few questions related to them.</li>
<li>You are expected to complete tutorial 1 to 5 before working on this assignment.</li>
<li>You are not alone! If you find yourself stuck on something, send an email to Kevin and CC to Dirk for help. We want this assignment to be rewarding and instructional, not frustrating and demoralizing. But, we don't know when or how to help unless you ask.</li>
<li>This assignment was designed by Kevin Lam. If you have any questions regarding this assignment, please send an email to Kevin and CC to Dirk.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a3" class="anchor"></a><h2 id="submission">Submission</h2><ul>
<li>You will receive <strong>zero marks</strong> if you submit after the deadline.</li>
<li>For programming tasks, please submit it through the provided link to VPL. Your work is <strong>automatically submitted</strong> when you save your work in VPL.</li>
<li>For written tasks, please submit it through the provided link to the Turnitin assignment activity.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a4" class="anchor"></a><h2 id="plagiarism">Plagiarism</h2><ul>
<li>We will be checking your work against other submissions in the class and from the internet for logical redundancy. If you copy someone else's work and submit it with minor changes, we will know. We trust you all to submit your own work only; please don't let us down. If you do, we will pursue the <strong>strongest consequences</strong> available to us.</li>
<li>Please be careful not to post spoilers to discussion forum. Please don't post any code that is directly related to the assignments. However you are welcome and encouraged to discuss general ideas on the discussion forums.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a5" class="anchor"></a><h2 id="grading">Grading</h2><ul>
<li>We will use an auto-grader to grade your program, please read the instructions in this document carefully to make sure that your program will pass the autograder.</li>
<li>The evaluation function in the VPL will test your code for the <strong>minimum requirement</strong>. Your code must at least pass the test in the evaluation to get marks.</li>
<li>The <strong>correctness</strong> of your implementation -- not the auto-grader's judgements -- will be the final judge of your score. If necessary, we will review and grade assignments individually to ensure that you receive due credit for your work.</li>
<li>We will test your program with <strong>additional test cases</strong> apart from those included in the evaluation function.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s1" name="s1a6" class="anchor"></a><h2 id="sandbox">Sandbox</h2><ul>
<li>There is a link to "Python Sandbox" in the menu of every tutorial, you could use it to test any Python code if needed.</li>
</ul></article></section><section data-section="2" class="tut-section mdc-elevation--z2"><a id="s2" name="s2" class="anchor"></a><h1 id="programming-part-1-local-search-4-">Programming Part 1: Local search (4%)</h1><article class="mdc-elevation--z4"><a id="s2" name="s2a1" class="anchor"></a><h2 id="vpl-for-this-part">VPL for this part</h2><p>Click the button below to launch the VPL for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1212946">Launch VPL</button><ul>
<li>Please define the required functions in <span>nqueen.py</span>. This file will be tested by the auto-grader.</li>
<li>You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a2" class="anchor"></a><h2 id="the-n-queen-problem">The n-Queen problem</h2><ul>
<li>We have discussed the 8-queen problem in the lecture. In this question, you are required to implement a few functions as part of the effort in solving the n-queen problem.</li>
<li>To solve for the n-queen problem, we start from an initial state and move the queens until a solution is found.</li>
<li>As our target is to find a configuration that no pairs of queen are on the same row, column and diagonal line, we can limit our initial state to have one queen in each row and allow only horizontal movement for each queen.</li>
<li>For example, one possible initial state for a 4-queen problem will be:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Q - - -</code></div><div class="line number2 index1 alt1"><code class="plain plain">Q - - -</code></div><div class="line number3 index2 alt2"><code class="plain plain">Q - - -</code></div><div class="line number4 index3 alt1"><code class="plain plain">Q - - -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Since we have only one queen in each row, we can use a tuple of 4 numbers, <code>(0, 0, 0, 0)</code> to represent the above initial state, where each value represents the horizontal position of the queen in a row.</li>
<li>Using this representation, <code>(0, 1, 2, 3)</code> represents the configuration of:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Q - - -</code></div><div class="line number2 index1 alt1"><code class="plain plain">- Q - -</code></div><div class="line number3 index2 alt2"><code class="plain plain">- - Q -</code></div><div class="line number4 index3 alt1"><code class="plain plain">- - - Q</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>and <code>(2, 0, 3, 1)</code> represents the configuration of:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">- - Q -</code></div><div class="line number2 index1 alt1"><code class="plain plain">Q - - -</code></div><div class="line number3 index2 alt2"><code class="plain plain">- - - Q</code></div><div class="line number4 index3 alt1"><code class="plain plain">- Q - -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>which is one of the possible solution to a 4-queen problem.</li>
<li>Larger board can be represented with a longer list, so for example, <code>(0, 1, 2, 3, 0, 1, 2, 3)</code> represents the board:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Q - - - - - - -</code></div><div class="line number2 index1 alt1"><code class="plain plain">- Q - - - - - -</code></div><div class="line number3 index2 alt2"><code class="plain plain">- - Q - - - - -</code></div><div class="line number4 index3 alt1"><code class="plain plain">- - - Q - - - -</code></div><div class="line number5 index4 alt2"><code class="plain plain">Q - - - - - - -</code></div><div class="line number6 index5 alt1"><code class="plain plain">- Q - - - - - -</code></div><div class="line number7 index6 alt2"><code class="plain plain">- - Q - - - - -</code></div><div class="line number8 index7 alt1"><code class="plain plain">- - - Q - - - -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>To help visualizing the above representation, we can write a simple function to help printing the list as a board.<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">printBoard(queen):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">n </code><code class="python keyword">in</code> <code class="python plain">queen:</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"- "</code><code class="python keyword">*</code><code class="python plain">n</code><code class="python keyword">+</code><code class="python string">"Q"</code><code class="python keyword">+</code><code class="python string">" -"</code><code class="python keyword">*</code><code class="python plain">(</code><code class="python functions">len</code><code class="python plain">(queen)</code><code class="python keyword">-</code><code class="python plain">n</code><code class="python keyword">-</code><code class="python value">1</code><code class="python plain">))</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
You are encouraged to make use of this function in testing your code, and modify it for your own purpose.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a3" class="anchor"></a><h2 id="task-1-the-attack-matrix-1-">Task 1: The attack matrix (1%)</h2><ul>
<li>Consider the board <code>(0, 3, 2, 1)</code>. We have 16 possible ways to move one queen, where only 12 of them are valid moves, producing 12 different boards.</li>
<li>If we count the number of attacking pairs of these moves, we have:<ol>
<li>Queen 0 to column 0: (not valid)</li>
<li>Queen 0 to column 1: <code>(1, 3, 2, 1)</code>, count: <samp>4</samp></li>
<li>Queen 0 to column 2: <code>(2, 3, 2, 1)</code>, count: <samp>5</samp></li>
<li>Queen 0 to column 3: <code>(3, 3, 2, 1)</code>, count: <samp>4</samp></li>
<li>Queen 1 to column 0: <code>(0, 0, 2, 1)</code>, count: <samp>3</samp></li>
<li>Queen 1 to column 1: <code>(0, 1, 2, 1)</code>, count: <samp>5</samp></li>
<li>Queen 1 to column 2: <code>(0, 2, 2, 1)</code>, count: <samp>3</samp></li>
<li>Queen 1 to column 3: (not valid)</li>
<li>Queen 2 to column 0: <code>(0, 3, 0, 1)</code>, count: <samp>3</samp></li>
<li>Queen 2 to column 1: <code>(0, 3, 1, 1)</code>, count: <samp>2</samp></li>
<li>Queen 2 to column 2: (not valid)</li>
<li>Queen 2 to column 3: <code>(0, 3, 3, 1)</code>, count: <samp>2</samp></li>
<li>Queen 3 to column 0: <code>(0, 3, 2, 0)</code>, count: <samp>3</samp></li>
<li>Queen 3 to column 1: (not valid)</li>
<li>Queen 3 to column 3: <code>(0, 3, 2, 2)</code>, count: <samp>3</samp></li>
<li>Queen 3 to column 4: <code>(0, 3, 2, 3)</code>, count: <samp>5</samp></li>
</ol>
</li>
<li>If we put these numbers on the board, at the position where the queen was moved to, the result will be:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-&nbsp; 4&nbsp; 5&nbsp; 4</code></div><div class="line number2 index1 alt1"><code class="plain plain">3&nbsp; 5&nbsp; 3&nbsp; -</code></div><div class="line number3 index2 alt2"><code class="plain plain">3&nbsp; 2&nbsp; -&nbsp; 2</code></div><div class="line number4 index3 alt1"><code class="plain plain">3&nbsp; -&nbsp; 3&nbsp; 5</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>We can see that by moving the queen at row 2 to position 1 or 3, we will get the smallest attacking count among the 12 possible moves.<br>Let's call this the attack matrix.</li>
<li>For any board, we can count the number of pairs of attacking queens using this function:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">countAttack(queen):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">count </code><code class="python keyword">=</code> <code class="python value">0</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">row1 </code><code class="python keyword">in</code> <code class="python functions">range</code><code class="python plain">( </code><code class="python value">0</code><code class="python plain">, </code><code class="python functions">len</code><code class="python plain">(queen) ):</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">row2 </code><code class="python keyword">in</code> <code class="python functions">range</code><code class="python plain">( row1 </code><code class="python keyword">+</code> <code class="python value">1</code><code class="python plain">, </code><code class="python functions">len</code><code class="python plain">( queen ) ):</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">if</code> <code class="python plain">queen[row1] </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python plain">queen[row2]:</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">count </code><code class="python keyword">+</code><code class="python keyword">=</code> <code class="python value">1</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">elif</code> <code class="python functions">abs</code><code class="python plain">(queen[row1] </code><code class="python keyword">-</code> <code class="python plain">queen[row2]) </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python plain">(row2 </code><code class="python keyword">-</code> <code class="python plain">row1):</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">count </code><code class="python keyword">+</code><code class="python keyword">=</code> <code class="python value">1</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">count</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
You can use the above function in this and the following tasks.</li>
<li>For this task, define the function <code>printMatrix(queen)</code> in <span>nqueen.py</span> with one parameter, <code>queen</code>.</li>
<li>Parameter <code>queen</code> is a tuple representing a n-queen problem as described above.</li>
<li>The function should print the corresponding attack matrix, with each value occupying 2 spaces, left-aligned.</li>
<li>For example, you can test your function in <span>main.py</span> using the following code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">nqueen </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">printMatrix( (</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">) )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-&nbsp; 4&nbsp; 5&nbsp; 4</code></div><div class="line number2 index1 alt1"><code class="plain plain">3&nbsp; 5&nbsp; 3&nbsp; -</code></div><div class="line number3 index2 alt2"><code class="plain plain">3&nbsp; 2&nbsp; -&nbsp; 2</code></div><div class="line number4 index3 alt1"><code class="plain plain">3&nbsp; -&nbsp; 3&nbsp; 5</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Not that your function should be able to handle boards of different sizes, e.g.,<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">nqueen </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">printMatrix( (</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">) )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
should produce the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-&nbsp; 16 17 16 18 14 14 14</code></div><div class="line number2 index1 alt1"><code class="plain plain">14 16 14 -&nbsp; 12 12 12 15</code></div><div class="line number3 index2 alt2"><code class="plain plain">15 13 -&nbsp; 13 12 11 14 11</code></div><div class="line number4 index3 alt1"><code class="plain plain">13 -&nbsp; 13 15 11 15 11 11</code></div><div class="line number5 index4 alt2"><code class="plain plain">-&nbsp; 13 15 13 16 11 12 11</code></div><div class="line number6 index5 alt1"><code class="plain plain">14 16 14 -&nbsp; 12 14 12 13</code></div><div class="line number7 index6 alt2"><code class="plain plain">15 14 -&nbsp; 14 14 12 14 12</code></div><div class="line number8 index7 alt1"><code class="plain plain">15 -&nbsp; 15 17 13 15 13 15</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>You can assume that the input <code>queen</code> is always a valid board, with all values less than the size of board.</li>
<li>You can assume that the board will not exceed the size of 8.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a4" class="anchor"></a><h2 id="task-2-move-one-queen-1-">Task 2: move one queen (1%)</h2><ul>
<li>Judging from the attack matrix shown for <code>(0, 3, 2, 1)</code> in the previous part, the lowest possible attack count of moving one queen will be <samp>2</samp>.</li>
<li>To solve a board using the local search method, we move one queen at a time based on the current best move. In this case, we will move queen 2 to position 1 or 3.</li>
<li>Define the function <code>moveOne(queen)</code> in <span>nqueen.py</span> with one parameter, <code>queen</code>.</li>
<li>Parameter <code>queen</code> is a tuple representing a n-queen problem as described above.</li>
<li>The function should <strong>always</strong> move one queen based on the attack matrix and return the result.</li>
<li>For example, for the case of <code>(0, 3, 2, 1)</code>, the function should return either <code>(0, 3, 1, 1)</code> or <code>(0, 3, 3, 1)</code>.</li>
<li>The function should still move a queen if the move results in a higher attacking count.</li>
<li>For example, you can test your function in <span>main.py</span> using the following code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">nqueen </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">queen1 </code><code class="python keyword">=</code> <code class="python plain">(</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python plain">queen2 </code><code class="python keyword">=</code> <code class="python plain">moveOne( queen1 )</code></div><div class="line number4 index3 alt1"><code class="python plain">printBoard(queen2)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Q - - -</code></div><div class="line number2 index1 alt1"><code class="plain plain">- - - Q</code></div><div class="line number3 index2 alt2"><code class="plain plain">- Q - -</code></div><div class="line number4 index3 alt1"><code class="plain plain">- Q - -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>Note the use of <code>printBoard()</code> function provided at the beginning of this part of assignment.</li>
<li>You can assume that the input <code>queen</code> is always a valid board, with all values less than the size of board.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a5" class="anchor"></a><h2 id="task-3-the-attack-matrix-ii-1-">Task 3: The attack matrix II (1%)</h2><ul>
<li>Suppose we further restrict the initial state so that no pair of queens are on the same row or the same column. Using the same representation, all values in the list will be distinct. For example, <code>(1, 2, 0, 3)</code> is a valid board:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">- Q - -</code></div><div class="line number2 index1 alt1"><code class="plain plain">- - Q -</code></div><div class="line number3 index2 alt2"><code class="plain plain">Q - - -</code></div><div class="line number4 index3 alt1"><code class="plain plain">- - - Q</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Under such restriction, when we move one queen to a column, we have to swap the column position of such queen with the queen at the target column. For example, in the above case, if we move the queen at row 0 to column 0, we need to move the queen at row 2 to column 1:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">- Q - -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q - - -&nbsp;&nbsp;&nbsp;&nbsp; Q - - -</code></div><div class="line number2 index1 alt1"><code class="plain plain">- - Q -&nbsp; --&gt;&nbsp; - - Q -&nbsp; -&gt; - - Q -</code></div><div class="line number3 index2 alt2"><code class="plain plain">Q - - -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Q - - -&nbsp;&nbsp;&nbsp;&nbsp; - Q - -</code></div><div class="line number4 index3 alt1"><code class="plain plain">- - - Q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - - - Q&nbsp;&nbsp;&nbsp;&nbsp; - - - Q</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>The above operation is equivalent to a swap of position between queen 0 and queen 2. The board change from <code>(1, 2, 0, 3)</code> to <code>(0, 2, 1, 3)</code>.</li>
<li>Now we can repeat what we have done in the previous tasks.</li>
<li>Consider the board <code>(0, 3, 2, 1)</code>, we have 12 possible swaps, which produce 12 boards.</li>
<li>If we count the number of attacking pairs of these swaps, we have:<ol>
<li>Queen 0 with queen 0: (not a swap)</li>
<li>Queen 0 with queen 1: <code>(3, 0, 2, 1)</code>, count: <samp>1</samp></li>
<li>Queen 0 with queen 2: <code>(2, 3, 0, 1)</code>, count: <samp>4</samp></li>
<li>Queen 0 with queen 3: <code>(1, 3, 2, 0)</code>, count: <samp>1</samp></li>
<li>Queen 1 with queen 0: <code>(3, 0, 2, 1)</code>, count: <samp>1</samp></li>
<li>Queen 1 with queen 1: (not a swap)</li>
<li>Queen 1 with queen 2: <code>(0, 2, 3, 1)</code>, count: <samp>1</samp></li>
<li>Queen 1 with queen 3: <code>(0, 1, 2, 3)</code>, count: <samp>6</samp></li>
<li>Queen 2 with queen 0: <code>(2, 3, 0, 1)</code>, count: <samp>4</samp></li>
<li>Queen 2 with queen 1: <code>(0, 2, 3, 1)</code>, count: <samp>1</samp></li>
<li>Queen 2 with queen 2: (not a swap)</li>
<li>Queen 2 with queen 3: <code>(0, 3, 1, 2)</code>, count: <samp>1</samp></li>
<li>Queen 3 with queen 0: <code>(1, 3, 2, 0)</code>, count: <samp>1</samp></li>
<li>Queen 3 with queen 1: <code>(0, 1, 2, 3)</code>, count: <samp>6</samp></li>
<li>Queen 3 with queen 2: <code>(0, 3, 1, 2)</code>, count: <samp>1</samp></li>
<li>Queen 3 with queen 3: (not a swap)</li>
</ol>
</li>
<li>The corresponding attack matrix will be:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-&nbsp; 1&nbsp; 4&nbsp; 1</code></div><div class="line number2 index1 alt1"><code class="plain plain">1&nbsp; -&nbsp; 1&nbsp; 6</code></div><div class="line number3 index2 alt2"><code class="plain plain">4&nbsp; 1&nbsp; -&nbsp; 1</code></div><div class="line number4 index3 alt1"><code class="plain plain">1&nbsp; 6&nbsp; 1&nbsp; -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Define the function <code>printMatrix2(queen)</code> in <span>nqueen.py</span> with one parameter, <code>queen</code>.</li>
<li>Parameter <code>queen</code> is a list representing a n-queen board as described above.</li>
<li>The function should print the corresponding attack matrix of swapping 2 queens as explained above, with each value occupying 2 spaces, left-aligned.</li>
<li>For example, you can test your function in <span>main.py</span> using the following code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">nqueen </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">printMatrix2( (</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">) )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-&nbsp; 1&nbsp; 4&nbsp; 1</code></div><div class="line number2 index1 alt1"><code class="plain plain">1&nbsp; -&nbsp; 1&nbsp; 6</code></div><div class="line number3 index2 alt2"><code class="plain plain">4&nbsp; 1&nbsp; -&nbsp; 1</code></div><div class="line number4 index3 alt1"><code class="plain plain">1&nbsp; 6&nbsp; 1&nbsp; -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Similar to the first task, your function should be able to handle boards of different sizes, e.g.,<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">nqueen </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">printMatrix2( (</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">7</code><code class="python plain">, </code><code class="python value">6</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">) )</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
should produce the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-&nbsp; 9&nbsp; 10 9&nbsp; 9&nbsp; 6&nbsp; 6&nbsp; 9</code></div><div class="line number2 index1 alt1"><code class="plain plain">9&nbsp; -&nbsp; 9&nbsp; 12 6&nbsp; 6&nbsp; 6&nbsp; 6</code></div><div class="line number3 index2 alt2"><code class="plain plain">10 9&nbsp; -&nbsp; 9&nbsp; 5&nbsp; 5&nbsp; 5&nbsp; 5</code></div><div class="line number4 index3 alt1"><code class="plain plain">9&nbsp; 12 9&nbsp; -&nbsp; 6&nbsp; 6&nbsp; 6&nbsp; 6</code></div><div class="line number5 index4 alt2"><code class="plain plain">9&nbsp; 6&nbsp; 5&nbsp; 6&nbsp; -&nbsp; 8&nbsp; 8&nbsp; 10</code></div><div class="line number6 index5 alt1"><code class="plain plain">6&nbsp; 6&nbsp; 5&nbsp; 6&nbsp; 8&nbsp; -&nbsp; 10 8</code></div><div class="line number7 index6 alt2"><code class="plain plain">6&nbsp; 6&nbsp; 5&nbsp; 6&nbsp; 8&nbsp; 10 -&nbsp; 8</code></div><div class="line number8 index7 alt1"><code class="plain plain">9&nbsp; 6&nbsp; 5&nbsp; 6&nbsp; 10 8&nbsp; 8&nbsp; -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>You can assume that the input <code>queen</code> is always a valid board, with all values distinct and less than the size of board.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s2" name="s2a6" class="anchor"></a><h2 id="task-4-swap-queens-1-">Task 4: swap queens (1%)</h2><ul>
<li>Similar to task 2, define the function <code>moveTwo(queen)</code> in <span>nqueen.py</span> with one parameter, <code>queen</code>.</li>
<li>Parameter <code>queen</code> is a list representing a n-queen problem as described above.</li>
<li>The function should <strong>always</strong> move two queens as described in task 3.</li>
<li>For example, for the case of <code>(0, 3, 2, 1)</code>, the function should return either <code>(1, 3, 2, 0)</code>, <code>(3, 0, 2, 1)</code>, or any other board with an attacking count of 1 after swapping the position of two queens.</li>
<li>The function should still move two queens if the move results in a higher attacking count.</li>
<li>For example, you can test your function in <span>main.py</span> using the following code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">nqueen </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">queen1 </code><code class="python keyword">=</code> <code class="python plain">(</code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python plain">queen2 </code><code class="python keyword">=</code> <code class="python plain">moveTwo( queen1 )</code></div><div class="line number4 index3 alt1"><code class="python plain">printBoard(queen2)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">- - - Q</code></div><div class="line number2 index1 alt1"><code class="plain plain">Q - - -</code></div><div class="line number3 index2 alt2"><code class="plain plain">- - Q -</code></div><div class="line number4 index3 alt1"><code class="plain plain">- Q - -</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>You can assume that the input <code>queen</code> is always a valid board, with all values distinct and less than the size of board.</li>
<li>You can assume that the board will not exceed the size of 8.</li>
</ul></article></section><section data-section="3" class="tut-section mdc-elevation--z2"><a id="s3" name="s3" class="anchor"></a><h1 id="programming-part-2-a-search-4-">Programming part 2: A* search (4%)</h1><article class="mdc-elevation--z4"><a id="s3" name="s3a1" class="anchor"></a><h2 id="vpl-for-this-part">VPL for this part</h2><p>Click the button below to launch the VPL for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1214092">Launch VPL</button><ul>
<li>Please define the required functions in <span>sortballs.py</span>. This file will be tested by the auto-grader.</li>
<li>You can test your code in <span>main.py</span>. Note that <span>main.py</span> will not be graded.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a2" class="anchor"></a><h2 id="a-sorting-system">A sorting system</h2><ul>
<li>A factory manufacturing numbered balls has a system that pack 5 balls into a package, where the package is simply a long tube holding the 5 balls.</li>
<li>The system has a temporary holder holding the balls and will place the balls into the package one by one. For example, at one point the package is holdering 3 of the balls and the holder holds the remaining 5, which can be illustrated like this:<table><tbody><tr><td>Holder</td><td style="width: 8em;border-top: 1pt solid black; border-bottom: 1pt solid black; text-align: right">④⑤③</td><td style="width: 8em;border-top: 1pt solid black; border-bottom: 1pt solid black; border-right: 1pt solid black; text-align: right">②①</td><td>Package</td></tr></tbody></table></li>
<li>It can also be represented as a tuple, with value <samp>0</samp> representing the boundary between the holder and the package:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">(4, 5, 3, 0, 2, 1)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>While packaging these balls, the system will sort the balls in ascending order. However, the system can only perform the following operations:<ul>
<li><strong><code>PUSH</code></strong>: push one ball from the holder to the package, e.g., <code>(4, 5, 3, 0, 2, 1)</code> will becomes <code>(4, 5, 0, 3, 2, 1)</code>.</li>
<li><strong><code>PULL</code></strong>: pull one ball from the package back to the holder, e.g., <code>(4, 5, 3, 0, 2, 1)</code> will becomes <code>(4, 5, 3, 2, 0, 1)</code>.</li>
<li><strong><code>SWAP</code></strong>: swap the last two balls in the holder, <code>(4, 5, 3, 0, 2, 1)</code> will becomes <code>(4, 3, 5, 0, 2, 1)</code>.</li>
<li><strong><code>FLIP</code></strong>: flip all balls in the package, e.g., <code>(4, 5, 3, 0, 2, 1)</code> will becomes <code>(4, 5, 3, 0, 1, 2)</code>.</li>
</ul>
</li>
<li>For example, if the initial state is <code>(2, 5, 4, 1, 3, 0)</code>, the system may sort the balls in this way:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">FROM: (2, 5, 4, 1, 3, 0)</code></div><div class="line number2 index1 alt1"><code class="plain plain">SWAP: (2, 5, 4, 3, 1, 0)</code></div><div class="line number3 index2 alt2"><code class="plain plain">PUSH: (2, 5, 4, 3, 0, 1)</code></div><div class="line number4 index3 alt1"><code class="plain plain">PUSH: (2, 5, 4, 0, 3, 1)</code></div><div class="line number5 index4 alt2"><code class="plain plain">PUSH: (2, 5, 0, 4, 3, 1)</code></div><div class="line number6 index5 alt1"><code class="plain plain">PUSH: (2, 0, 5, 4, 3, 1)</code></div><div class="line number7 index6 alt2"><code class="plain plain">FLIP: (2, 0, 1, 3, 4, 5)</code></div><div class="line number8 index7 alt1"><code class="plain plain">PULL: (2, 1, 0, 3, 4, 5)</code></div><div class="line number9 index8 alt2"><code class="plain plain">SWAP: (1, 2, 0, 3, 4, 5)</code></div><div class="line number10 index9 alt1"><code class="plain plain">PUSH: (1, 0, 2, 3, 4, 5)</code></div><div class="line number11 index10 alt2"><code class="plain plain">PUSH: (0, 1, 2, 3, 4, 5)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>Opertions: 5 PUSH, 1 PULL, 2 SWAP, 1 FLIP</li>
<li>Another possible solution will be:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">FROM: (2, 5, 4, 1, 3, 0)</code></div><div class="line number2 index1 alt1"><code class="plain plain">PUSH: (2, 5, 4, 1, 0, 3)</code></div><div class="line number3 index2 alt2"><code class="plain plain">SWAP: (2, 5, 1, 4, 0, 3)</code></div><div class="line number4 index3 alt1"><code class="plain plain">PUSH: (2, 5, 1, 0, 4, 3)</code></div><div class="line number5 index4 alt2"><code class="plain plain">SWAP: (2, 1, 5, 0, 4, 3)</code></div><div class="line number6 index5 alt1"><code class="plain plain">PUSH: (2, 1, 0, 5, 4, 3)</code></div><div class="line number7 index6 alt2"><code class="plain plain">SWAP: (1, 2, 0, 5, 4, 3)</code></div><div class="line number8 index7 alt1"><code class="plain plain">FLIP: (1, 2, 0, 3, 4, 5)</code></div><div class="line number9 index8 alt2"><code class="plain plain">PUSH: (1, 0, 2, 3, 4, 5)</code></div><div class="line number10 index9 alt1"><code class="plain plain">PUSH: (0, 1, 2, 3, 4, 5)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>Opertions: 5 PUSH, 0 PULL, 3 SWAP, 1 FLIP</li>
<li>Different operation needs a different amount of time to complete, for instance:<ul>
<li><strong><code>PUSH</code></strong>: 10 unit of time</li>
<li><strong><code>PULL</code></strong>: 5 unit of time</li>
<li><strong><code>SWAP</code></strong>: 17 unit of time</li>
<li><strong><code>FLIP</code></strong>: 8 unit of time</li>
</ul>
</li>
<li>Therefore the two solutions above takes <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;107&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 17.469em; display: inline-block;"><span style="display: inline-block; position: relative; width: 15.572em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1015.52em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="mn" id="MathJax-Span-3" style="font-family: STIXGeneral-Regular;">5</span><span class="mo" id="MathJax-Span-4" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-5" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-6" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-7" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">1</span><span class="mo" id="MathJax-Span-8" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-9" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-10" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-11" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">2</span><span class="mo" id="MathJax-Span-12" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-13" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-14" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-15" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">1</span><span class="mo" id="MathJax-Span-16" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-17" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">8</span><span class="mo" id="MathJax-Span-18" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-19" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">107</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>5</mn><mo>×</mo><mn>10</mn><mo>+</mo><mn>1</mn><mo>×</mo><mn>5</mn><mo>+</mo><mn>2</mn><mo>×</mo><mn>17</mn><mo>+</mo><mn>1</mn><mo>×</mo><mn>8</mn><mo>=</mo><mn>107</mn></math></span></span><script type="math/tex" id="MathJax-Element-1">5 \times 10 + 1 \times 5 + 2 \times 17 + 1 \times 8 = 107</script> and <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;109&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-20" style="width: 13.898em; display: inline-block;"><span style="display: inline-block; position: relative; width: 12.391em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1012.34em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-21"><span class="mn" id="MathJax-Span-22" style="font-family: STIXGeneral-Regular;">5</span><span class="mo" id="MathJax-Span-23" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-24" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-25" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-26" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">3</span><span class="mo" id="MathJax-Span-27" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-28" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-29" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-30" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">1</span><span class="mo" id="MathJax-Span-31" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-32" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">8</span><span class="mo" id="MathJax-Span-33" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-34" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">109</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>5</mn><mo>×</mo><mn>10</mn><mo>+</mo><mn>3</mn><mo>×</mo><mn>17</mn><mo>+</mo><mn>1</mn><mo>×</mo><mn>8</mn><mo>=</mo><mn>109</mn></math></span></span><script type="math/tex" id="MathJax-Element-2">5 \times 10 + 3 \times 17 + 1 \times 8 = 109</script> unit of time respectively, i.e., the first solution is a better one.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a3" class="anchor"></a><h2 id="task-1-apply-move">Task 1: apply move</h2><ul>
<li>Define the function <code>applyMove(state, move)</code> in <span>sortballs.py</span> with two parameters, <code>state</code>, and <code>move</code>.</li>
<li>Parameter <code>state</code> is a tuple representing a situation as described above.</li>
<li>Parameter <code>move</code> is a string, which can be either "PUSH", "PULL", "SWAP", or "FLIP", representing the 4 operations described above.</li>
<li>The function should return a new state by applying the specified move as described above.</li>
<li>For example, if state is <code>(2, 0, 1, 3, 4, 5)</code> and the move is <code>PUSH</code>, the function should return <code>(0, 2, 1, 3, 4, 5)</code>. It can be tested using the following code in <span>main.py</span>:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">sortballs </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">state </code><code class="python keyword">=</code> <code class="python plain">(</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python plain">move </code><code class="python keyword">=</code> <code class="python string">'PUSH'</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">(applyMove(state, move))</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">(0, 2, 1, 3, 4, 5)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>If the specific move is not possible, e.g., there is no ball in the holder to swap, the function return a state that is identical to the input state. For example:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">sortballs </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">state </code><code class="python keyword">=</code> <code class="python plain">(</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python plain">move </code><code class="python keyword">=</code> <code class="python string">'SWAP'</code></div><div class="line number4 index3 alt1"><code class="python functions">print</code><code class="python plain">(applyMove(state, move))</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">(2, 0, 1, 3, 4, 5)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>You can assume that the input <code>state</code> is always a valid state, i.e., a tuple with values 0 to 5 in any order;</li>
<li>You can assume that the input <code>move</code> is always a string of either 'PUSH', 'PULL, 'SWAP', or 'FLIP'.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a4" class="anchor"></a><h2 id="task-2-heuristic">Task 2: heuristic</h2><ul>
<li>Define the functon <code>h(state)</code> in <span>sortballs.py</span> with one parameter, <code>state</code>.</li>
<li>Parameter <code>state</code> is a tuple representing a situation as described above.</li>
<li>The function should evaluate the state and return a heuristic in the following ways:<ul>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-35" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-36"><span class="mi" id="MathJax-Span-37" style="font-family: STIXGeneral-Italic;">A</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math></span></span><script type="math/tex" id="MathJax-Element-3">A</script> = number of balls in the holder <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-38" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.844em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-39"><span class="mo" id="MathJax-Span-40" style="font-family: STIXGeneral-Regular;">×</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.753em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>×</mo></math></span></span><script type="math/tex" id="MathJax-Element-4">\times</script> cost of <code>PUSH</code> operation.</li>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-41" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.62em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-42"><span class="mi" id="MathJax-Span-43" style="font-family: STIXGeneral-Italic;">B</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi></math></span></span><script type="math/tex" id="MathJax-Element-5">B</script> = number of balls that is on the right of at least one ball with a greater value using the tuple representation described above.</li>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-44" style="width: 0.784em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.672em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.67em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-45"><span class="mi" id="MathJax-Span-46" style="font-family: STIXGeneral-Italic;">C<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math></span></span><script type="math/tex" id="MathJax-Element-6">C</script> = number of balls that is on the left of at least one ball with a greater value using the tuple representation described above.</li>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-47" style="width: 0.84em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.728em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.73em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-48"><span class="mi" id="MathJax-Span-49" style="font-family: STIXGeneral-Italic;">D</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math></span></span><script type="math/tex" id="MathJax-Element-7">D</script> = the minimum of:<br>1) value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-50" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.62em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-51"><span class="mi" id="MathJax-Span-52" style="font-family: STIXGeneral-Italic;">B</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi></math></span></span><script type="math/tex" id="MathJax-Element-8">B</script> <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-53" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.844em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-54"><span class="mo" id="MathJax-Span-55" style="font-family: STIXGeneral-Regular;">×</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.753em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>×</mo></math></span></span><script type="math/tex" id="MathJax-Element-9">\times</script> cost of <code>SWAP</code> operation, and<br>2) cost of <code>FLIP</code> operation <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-56" style="width: 0.784em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.672em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.789em, 1000.62em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-57"><span class="mo" id="MathJax-Span-58" style="font-family: STIXGeneral-Regular;">+</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.816em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>+</mo></math></span></span><script type="math/tex" id="MathJax-Element-10">+</script> (value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-59" style="width: 0.784em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.672em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.67em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-60"><span class="mi" id="MathJax-Span-61" style="font-family: STIXGeneral-Italic;">C<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math></span></span><script type="math/tex" id="MathJax-Element-11">C</script> <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-12-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-62" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.844em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-63"><span class="mo" id="MathJax-Span-64" style="font-family: STIXGeneral-Regular;">×</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.753em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>×</mo></math></span></span><script type="math/tex" id="MathJax-Element-12">\times</script> cost of <code>SWAP</code> operation).</li>
<li>return the value of <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-13-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-65" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-66"><span class="mi" id="MathJax-Span-67" style="font-family: STIXGeneral-Italic;">A</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math></span></span><script type="math/tex" id="MathJax-Element-13">A</script> + value of <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-14-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-68" style="width: 0.84em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.728em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.73em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-69"><span class="mi" id="MathJax-Span-70" style="font-family: STIXGeneral-Italic;">D</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math></span></span><script type="math/tex" id="MathJax-Element-14">D</script> as the heuristic.</li>
</ul>
</li>
<li>For example, to find the heuristic of <code>(2, 5, 4, 1, 3, 0)</code>:<ul>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-15-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;50&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-71" style="width: 7.759em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.922em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.92em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-72"><span class="mi" id="MathJax-Span-73" style="font-family: STIXGeneral-Italic;">A</span><span class="mo" id="MathJax-Span-74" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-75" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">5</span><span class="mo" id="MathJax-Span-76" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-77" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-78" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-79" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">50</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>=</mo><mn>5</mn><mo>×</mo><mn>10</mn><mo>=</mo><mn>50</mn></math></span></span><script type="math/tex" id="MathJax-Element-15">A = 5 \times 10 = 50</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-16-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-80" style="width: 2.793em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.458em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.4em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-81"><span class="mi" id="MathJax-Span-82" style="font-family: STIXGeneral-Italic;">B</span><span class="mo" id="MathJax-Span-83" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-84" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">3</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mo>=</mo><mn>3</mn></math></span></span><script type="math/tex" id="MathJax-Element-16">B = 3</script> (ball 4, 1, and 3)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-17-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-85" style="width: 2.849em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.514em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.51em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-86"><span class="mi" id="MathJax-Span-87" style="font-family: STIXGeneral-Italic;">C<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-88" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-89" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">2</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>=</mo><mn>2</mn></math></span></span><script type="math/tex" id="MathJax-Element-17">C = 2</script> (ball 1, and 2)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-18-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;42&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-90" style="width: 15.46em; display: inline-block;"><span style="display: inline-block; position: relative; width: 13.786em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1013.79em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-91"><span class="mi" id="MathJax-Span-92" style="font-family: STIXGeneral-Italic;">D</span><span class="mo" id="MathJax-Span-93" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mi" id="MathJax-Span-94" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">m</span><span class="mi" id="MathJax-Span-95" style="font-family: STIXGeneral-Italic;">i</span><span class="mi" id="MathJax-Span-96" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-97" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-98" style="font-family: STIXGeneral-Regular;">3</span><span class="mo" id="MathJax-Span-99" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-100" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-101" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-102" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">2</span><span class="mo" id="MathJax-Span-103" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-104" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-105" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-106" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">8</span><span class="mo" id="MathJax-Span-107" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-108" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-109" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">42</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><mn>17</mn><mo>,</mo><mn>2</mn><mo>×</mo><mn>17</mn><mo>+</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>42</mn></math></span></span><script type="math/tex" id="MathJax-Element-18">D = min(3 \times 17, 2 \times 17 + 8) = 42</script></li>
<li>return <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-19-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;92&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-110" style="width: 5.416em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.802em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.8em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-111"><span class="mi" id="MathJax-Span-112" style="font-family: STIXGeneral-Italic;">A</span><span class="mo" id="MathJax-Span-113" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-114" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">D</span><span class="mo" id="MathJax-Span-115" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-116" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">92</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>+</mo><mi>D</mi><mo>=</mo><mn>92</mn></math></span></span><script type="math/tex" id="MathJax-Element-19">A + D = 92</script></li>
</ul>
</li>
<li>You can test your function with the following code in <span>main.py</span><div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">sortballs </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">state </code><code class="python keyword">=</code> <code class="python plain">(</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python functions">print</code><code class="python plain">(h(state))</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output of <samp>92</samp></li>
<li>Another example, to find the heuristic of <code>(2, 5, 4, 0, 3, 1)</code>:<ul>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-20-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;30&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-117" style="width: 7.759em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.922em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.92em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-118"><span class="mi" id="MathJax-Span-119" style="font-family: STIXGeneral-Italic;">A</span><span class="mo" id="MathJax-Span-120" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-121" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">3</span><span class="mo" id="MathJax-Span-122" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-123" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-124" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-125" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">30</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>=</mo><mn>3</mn><mo>×</mo><mn>10</mn><mo>=</mo><mn>30</mn></math></span></span><script type="math/tex" id="MathJax-Element-20">A = 3 \times 10 = 30</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-21-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-126" style="width: 2.793em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.458em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.4em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-127"><span class="mi" id="MathJax-Span-128" style="font-family: STIXGeneral-Italic;">B</span><span class="mo" id="MathJax-Span-129" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-130" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">3</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mo>=</mo><mn>3</mn></math></span></span><script type="math/tex" id="MathJax-Element-21">B = 3</script> (ball 4, 3 and 1)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-22-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-131" style="width: 2.849em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.514em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.4em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-132"><span class="mi" id="MathJax-Span-133" style="font-family: STIXGeneral-Italic;">C<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-134" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-135" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">1</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>=</mo><mn>1</mn></math></span></span><script type="math/tex" id="MathJax-Element-22">C = 1</script> (ball 2)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-23-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;25&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-136" style="width: 15.46em; display: inline-block;"><span style="display: inline-block; position: relative; width: 13.786em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1013.73em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-137"><span class="mi" id="MathJax-Span-138" style="font-family: STIXGeneral-Italic;">D</span><span class="mo" id="MathJax-Span-139" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mi" id="MathJax-Span-140" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">m</span><span class="mi" id="MathJax-Span-141" style="font-family: STIXGeneral-Italic;">i</span><span class="mi" id="MathJax-Span-142" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-143" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-144" style="font-family: STIXGeneral-Regular;">3</span><span class="mo" id="MathJax-Span-145" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-146" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-147" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-148" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">1</span><span class="mo" id="MathJax-Span-149" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-150" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-151" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-152" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">8</span><span class="mo" id="MathJax-Span-153" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-154" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-155" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">25</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><mn>17</mn><mo>,</mo><mn>1</mn><mo>×</mo><mn>17</mn><mo>+</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>25</mn></math></span></span><script type="math/tex" id="MathJax-Element-23">D = min(3 \times 17, 1 \times 17 + 8) = 25</script></li>
<li>return <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-24-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;55&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-156" style="width: 5.416em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.802em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.75em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-157"><span class="mi" id="MathJax-Span-158" style="font-family: STIXGeneral-Italic;">A</span><span class="mo" id="MathJax-Span-159" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-160" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">D</span><span class="mo" id="MathJax-Span-161" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-162" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">55</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>+</mo><mi>D</mi><mo>=</mo><mn>55</mn></math></span></span><script type="math/tex" id="MathJax-Element-24">A + D = 55</script></li>
</ul>
</li>
<li>One last example, to find the heuristic of <code>(0, 1, 2, 3, 4, 5)</code>:<ul>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-25-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-163" style="width: 7.201em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.42em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.42em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-164"><span class="mi" id="MathJax-Span-165" style="font-family: STIXGeneral-Italic;">A</span><span class="mo" id="MathJax-Span-166" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-167" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span><span class="mo" id="MathJax-Span-168" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-169" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-170" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-171" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>=</mo><mn>0</mn><mo>×</mo><mn>10</mn><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-25">A = 0 \times 10 = 0</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-26-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-172" style="width: 2.793em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.458em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.46em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-173"><span class="mi" id="MathJax-Span-174" style="font-family: STIXGeneral-Italic;">B</span><span class="mo" id="MathJax-Span-175" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-176" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-26">B = 0</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-27-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-177" style="width: 2.849em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.514em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1002.51em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-178"><span class="mi" id="MathJax-Span-179" style="font-family: STIXGeneral-Italic;">C<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-180" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-181" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">4</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>=</mo><mn>4</mn></math></span></span><script type="math/tex" id="MathJax-Element-27">C = 4</script> (ball 1, 2, 3, and 4)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-28-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;17&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-182" style="width: 12.559em; display: inline-block;"><span style="display: inline-block; position: relative; width: 11.219em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1011.22em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-183"><span class="mi" id="MathJax-Span-184" style="font-family: STIXGeneral-Italic;">D</span><span class="mo" id="MathJax-Span-185" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mi" id="MathJax-Span-186" style="font-family: STIXGeneral-Italic; padding-left: 0.338em;">m</span><span class="mi" id="MathJax-Span-187" style="font-family: STIXGeneral-Italic;">i</span><span class="mi" id="MathJax-Span-188" style="font-family: STIXGeneral-Italic;">n</span><span class="mo" id="MathJax-Span-189" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-190" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-191" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-192" style="font-family: STIXGeneral-Regular; padding-left: 0.17em;">4</span><span class="mo" id="MathJax-Span-193" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-194" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">17</span><span class="mo" id="MathJax-Span-195" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-196" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">8</span><span class="mo" id="MathJax-Span-197" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-198" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-199" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>0</mn><mo>,</mo><mn>4</mn><mo>×</mo><mn>17</mn><mo>+</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-28">D = min(0, 4 \times 17 + 8) = 0</script></li>
<li>return <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-29-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-200" style="width: 4.858em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.3em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.3em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-201"><span class="mi" id="MathJax-Span-202" style="font-family: STIXGeneral-Italic;">A</span><span class="mo" id="MathJax-Span-203" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-204" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">D</span><span class="mo" id="MathJax-Span-205" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-206" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>+</mo><mi>D</mi><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-29">A + D = 0</script>  (Goal state)</li>
</ul>
</li>
<li>You can assume that the input <code>state</code> is always a valid state, i.e., a tuple with values 0 to 5 in any order.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s3" name="s3a5" class="anchor"></a><h2 id="task-3-get-next-move">Task 3: get next move</h2><ul>
<li>Define the function <code>getNext(frontier)</code> in <span>sortballs.py</span> with one parameter, <code>frontier</code>.</li>
<li>Parameter <code>frontier</code> is a list of dictionary, each consists of two values, <code>state</code> and <code>path</code>.</li>
<li>For every <code>item</code> in <code>frontier</code>:<ul>
<li><code>item['state']</code> is a tuple representing a situation as described above.</li>
<li><code>item['path']</code> is the list of operations that leads to the state <code>item['state']</code>.</li>
</ul>
</li>
<li>Your function should <strong>remove</strong> and <em>*return</em> one item from the frontier, for the purpose of using A-star search to find the fastest operation needed to produce a sorted package.</li>
<li>You can use the following code in <span>main.py</span> to test your code:<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">sortballs </code><code class="python keyword">import</code> <code class="python keyword">*</code></div><div class="line number2 index1 alt1"><code class="python plain">frontier </code><code class="python keyword">=</code> <code class="python plain">[</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'PULL'</code> <code class="python plain">] },</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'SWAP'</code> <code class="python plain">] },</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'FLIP'</code> <code class="python plain">] },</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'PUSH'</code><code class="python plain">, </code><code class="python string">'PUSH'</code> <code class="python plain">] },</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'PUSH'</code><code class="python plain">, </code><code class="python string">'PULL'</code> <code class="python plain">] },</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">5</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'PUSH'</code><code class="python plain">, </code><code class="python string">'SWAP'</code> <code class="python plain">] },</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">{ </code><code class="python string">'state'</code><code class="python plain">: (</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">5</code><code class="python plain">, </code><code class="python value">0</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">3</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">), </code><code class="python string">'path'</code><code class="python plain">: [ </code><code class="python string">'PUSH'</code><code class="python plain">, </code><code class="python string">'FLIP'</code> <code class="python plain">] },</code></div><div class="line number10 index9 alt1"><code class="python plain">]</code></div><div class="line number11 index10 alt2"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Before getNext:"</code><code class="python plain">)</code></div><div class="line number12 index11 alt1"><code class="python keyword">for</code> <code class="python plain">f </code><code class="python keyword">in</code> <code class="python plain">frontier:</code></div><div class="line number13 index12 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(f)</code></div><div class="line number14 index13 alt1"><code class="python plain">item </code><code class="python keyword">=</code> <code class="python plain">getNext(frontier)</code></div><div class="line number15 index14 alt2"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"getNext: "</code><code class="python plain">, item)</code></div><div class="line number16 index15 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"After getNext:"</code><code class="python plain">)</code></div><div class="line number17 index16 alt2"><code class="python keyword">for</code> <code class="python plain">f </code><code class="python keyword">in</code> <code class="python plain">frontier:</code></div><div class="line number18 index17 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(f)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
which produces the output:<div>
      <div class="syntaxhighlighter  plain">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Before getNext:</code></div><div class="line number2 index1 alt1"><code class="plain plain">{'state': (2, 5, 4, 3, 0, 1), 'path': ['PULL']}</code></div><div class="line number3 index2 alt2"><code class="plain plain">{'state': (2, 4, 5, 0, 3, 1), 'path': ['SWAP']}</code></div><div class="line number4 index3 alt1"><code class="plain plain">{'state': (2, 5, 4, 0, 1, 3), 'path': ['FLIP']}</code></div><div class="line number5 index4 alt2"><code class="plain plain">{'state': (2, 0, 5, 4, 3, 1), 'path': ['PUSH', 'PUSH']}</code></div><div class="line number6 index5 alt1"><code class="plain plain">{'state': (2, 5, 4, 0, 3, 1), 'path': ['PUSH', 'PULL']}</code></div><div class="line number7 index6 alt2"><code class="plain plain">{'state': (5, 2, 0, 4, 3, 1), 'path': ['PUSH', 'SWAP']}</code></div><div class="line number8 index7 alt1"><code class="plain plain">{'state': (2, 5, 0, 1, 3, 4), 'path': ['PUSH', 'FLIP']}</code></div><div class="line number9 index8 alt2"><code class="plain plain">getNext:&nbsp; {'state': (2, 0, 5, 4, 3, 1), 'path': ['PUSH', 'PUSH']}</code></div><div class="line number10 index9 alt1"><code class="plain plain">After getNext:</code></div><div class="line number11 index10 alt2"><code class="plain plain">{'state': (2, 5, 4, 3, 0, 1), 'path': ['PULL']}</code></div><div class="line number12 index11 alt1"><code class="plain plain">{'state': (2, 4, 5, 0, 3, 1), 'path': ['SWAP']}</code></div><div class="line number13 index12 alt2"><code class="plain plain">{'state': (2, 5, 4, 0, 1, 3), 'path': ['FLIP']}</code></div><div class="line number14 index13 alt1"><code class="plain plain">{'state': (2, 5, 4, 0, 3, 1), 'path': ['PUSH', 'PULL']}</code></div><div class="line number15 index14 alt2"><code class="plain plain">{'state': (5, 2, 0, 4, 3, 1), 'path': ['PUSH', 'SWAP']}</code></div><div class="line number16 index15 alt1"><code class="plain plain">{'state': (2, 5, 0, 1, 3, 4), 'path': ['PUSH', 'FLIP']}</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div></li>
<li>Note that the number of items in the frontier is reduced by 1 after <code>getNext()</code>.</li>
<li>You can assume that the input <code>frontier</code> is always a list of dictionary, each with a valid <code>state</code> (a tuple of values 0-5) and valid <code>path</code> (a list of moves).</li>
</ul></article></section><section data-section="4" class="tut-section mdc-elevation--z2"><a id="s4" name="s4" class="anchor"></a><h1 id="written-question-12-">Written Question (12%)</h1><article class="mdc-elevation--z4"><a id="s4" name="s4a1" class="anchor"></a><h2 id="turnitin">Turnitin</h2><p>Click the button below to launch the Turnitin activity for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/turnitintooltwo/view.php?id=1214424">Launch Turnitin</button><ul>
<li>Please submit in <code>.docx</code> or <code>.pdf</code> format.</li>
<li>Hand-written answer may not be marked if they are not clearly visible. Note that Turnitin may not accept document without any detectable words. You can include a cover page to bypass such test.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s4" name="s4a2" class="anchor"></a><h2 id="notes-about-written-question">Notes about written question</h2><ul>
<li>When answering these questions, remember that you can make use of the Python sandbox or the <span>main.py</span> of the two VPLs in this assignment to run your Python program.</li>
<li>You should label your answer with the question number clearly.</li>
</ul></article><article class="mdc-elevation--z4"><a id="s4" name="s4a3" class="anchor"></a><h2 id="question-related-to-local-search-">Question related to Local Search.</h2><p><strong>Q1</strong>. With the functions defined in programming part 1, we can implement the local search algorithm as follow.</p><div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">localSearch(queen):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">while</code> <code class="python plain">countAttack(queen) &gt; </code><code class="python value">0</code><code class="python plain">:</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">queen </code><code class="python keyword">=</code> <code class="python plain">moveOne(queen)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">printBoard(queen)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div><p>or if <code>moveTwo(queen)</code> is used instead:</p><div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">localSearch2(queen):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">while</code> <code class="python plain">countAttack(queen) &gt; </code><code class="python value">0</code><code class="python plain">:</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">queen </code><code class="python keyword">=</code> <code class="python plain">moveTwo(queen)</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">printBoard(queen)</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div><p>Making use of the functions above, analyse and compare the performance of solving the n-queen problem with local search algorithm using <code>moveOne()</code> and <code>moveTwo()</code>.</p><p>Comparison should be done based on:</p><ul>
<li>the number of times <code>moveOne()</code>/<code>moveTwo()</code> is executed for different initial boards and board size, and</li>
<li>the ability of <code>moveOne()</code>/<code>moveTwo()</code> reaching the solution within the execution time limit for different initial boards and board size.</li>
</ul><p>You may modify the two functions for better analysis.</p><p><strong>Q2</strong>. Consider the local search method using function <code>moveOne()</code> only, sometimes the search is not able to find a solution within the exeuction time limit. Do you think the search will be successful if a longer execution time is allowed? Why?</p><p><strong>Q3</strong>. Discuss one similarity and one dissimilarity of the local search method with:</p><ol>
<li>BFS</li>
<li>DFS</li>
<li>UCS</li>
</ol></article><article class="mdc-elevation--z4"><a id="s4" name="s4a4" class="anchor"></a><h2 id="question-related-to-a-search-">Question related to A* Search.</h2><p><strong>Q4</strong>. Click the button below to launch the VPL activity for this part of assignment.</p><button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1214532">Launch VPL</button><ul>
<li>Click on the save button and then click on the run button <i class="fa fa-lg fa-rocket"></i> and enter your student ID as prompted.</li>
<li>You will be provided with an initial state of the problem described in programming part 2.</li>
<li>With the functions defined in your programming tasks, we can implement the A*-TSA as follow.<div>
      <div class="syntaxhighlighter  python">
        <table border="0" cellpadding="0" cellspacing="0">
          
          <tbody>
            <tr>
              <td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div></td>
              <td class="code">
                <div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">astarSearch(state):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># initialize frontier using initial state of problem</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">frontier </code><code class="python keyword">=</code> <code class="python plain">[ { </code><code class="python string">'state'</code><code class="python plain">: state, </code><code class="python string">'path'</code><code class="python plain">: [] } ]</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># while frontier is not empty</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">while</code> <code class="python functions">len</code><code class="python plain">(frontier) &gt; </code><code class="python value">0</code><code class="python plain">:</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># choose a leaf node and remove it from frontier</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">node </code><code class="python keyword">=</code> <code class="python plain">getNext(frontier)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># if node contains a goal state</code></div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">if</code> <code class="python plain">h(node[</code><code class="python string">'state'</code><code class="python plain">]) </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">:</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># return corresponding solution</code></div><div class="line number12 index11 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">node[</code><code class="python string">'path'</code><code class="python plain">]</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># expand the node adding the resulting nodes to the frontier</code></div><div class="line number15 index14 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">move </code><code class="python keyword">in</code> <code class="python plain">[ </code><code class="python string">'PUSH'</code><code class="python plain">, </code><code class="python string">'PULL'</code><code class="python plain">, </code><code class="python string">'SWAP'</code><code class="python plain">, </code><code class="python string">'FLIP'</code> <code class="python plain">]:</code></div><div class="line number16 index15 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">frontier.append( { </code><code class="python string">'state'</code><code class="python plain">: applyMove(node[</code><code class="python string">'state'</code><code class="python plain">], move), </code><code class="python string">'path'</code><code class="python plain">: node[</code><code class="python string">'path'</code><code class="python plain">] </code><code class="python keyword">+</code> <code class="python plain">[ move ] } )</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># return None if no solution is found</code></div><div class="line number19 index18 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python color1">None</code></div></div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
Find the solution to the given initial state using the function above. Calculate the cost of the solution.</li>
<li>If in case your program cannot solve the given state, you can use this VPL instead:<button class="mdc-button mdc-button--raised" data-href="http://moodle.hku.hk/mod/vpl/view.php?id=1230163">Launch VPL</button></li>
<li>If your program is unable to solve the simpler state, you can solve the state manually. In this case, your answer do not need to be the best solution. Please state that clearly in your answer if you are solving it manually. Marks will be given if your program is working correctly.</li>
</ul><p><strong>Q5</strong>. Suppose the number of balls is reduced to 3. Draw a state space graph similar to the one shown in p.16 of lecture notes <strong>2 Search</strong> with all possible states.</p><p><strong>Q6</strong>. If the number of balls is <code>N</code>, what is the size of the search space (i.e., number of stats in the state space graph)?</p><p><strong>Q7</strong>. James wants to simplify the heuristic calculation.</p><ul>
<li>He suggests the following change:<ul>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-30-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-207" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.62em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-208"><span class="mi" id="MathJax-Span-209" style="font-family: STIXGeneral-Italic;">P</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math></span></span><script type="math/tex" id="MathJax-Element-30">P</script> = number of balls in the holder <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-31-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-210" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.844em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-211"><span class="mo" id="MathJax-Span-212" style="font-family: STIXGeneral-Regular;">×</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.753em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>×</mo></math></span></span><script type="math/tex" id="MathJax-Element-31">\times</script> cost of <code>PUSH</code></li>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-32-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-213" style="width: 0.84em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.728em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.73em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-214"><span class="mi" id="MathJax-Span-215" style="font-family: STIXGeneral-Italic;">Q</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Q</mi></math></span></span><script type="math/tex" id="MathJax-Element-32">Q</script> = number of balls in the holder that is on the right of at least one ball with a greater value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-33-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-216" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.844em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-217"><span class="mo" id="MathJax-Span-218" style="font-family: STIXGeneral-Regular;">×</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.753em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>×</mo></math></span></span><script type="math/tex" id="MathJax-Element-33">\times</script> cost of <code>PULL</code></li>
<li>Calculate value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-34-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-219" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1000.62em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-220"><span class="mi" id="MathJax-Span-221" style="font-family: STIXGeneral-Italic;">R</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.878em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math></span></span><script type="math/tex" id="MathJax-Element-34">R</script> = number of balls in the package that is on the right of at least one ball with a greater value <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-35-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-222" style="width: 0.728em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.617em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.844em, 1000.56em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-223"><span class="mo" id="MathJax-Span-224" style="font-family: STIXGeneral-Regular;">×</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.753em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>×</mo></math></span></span><script type="math/tex" id="MathJax-Element-35">\times</script> (cost of <code>PULL</code> <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-36-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-225" style="width: 0.784em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.672em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.789em, 1000.62em, 2.737em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-226"><span class="mo" id="MathJax-Span-227" style="font-family: STIXGeneral-Regular;">+</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.122em; border-left: 0px solid; width: 0px; height: 0.816em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>+</mo></math></span></span><script type="math/tex" id="MathJax-Element-36">+</script> cost of <code>PUSH</code>)</li>
<li>return the value of <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-37-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-228" style="width: 4.69em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.188em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1004.19em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-229"><span class="mi" id="MathJax-Span-230" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-231" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-232" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">Q</span><span class="mo" id="MathJax-Span-233" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-234" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">R</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>+</mo><mi>Q</mi><mo>+</mo><mi>R</mi></math></span></span><script type="math/tex" id="MathJax-Element-37">P + Q + R</script> as the heuristic</li>
</ul>
</li>
<li>For example, to find the heuristic of <code>(2, 5, 4, 1, 3, 0)</code>:<ul>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-38-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;50&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-235" style="width: 7.759em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.922em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.92em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-236"><span class="mi" id="MathJax-Span-237" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-238" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-239" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">5</span><span class="mo" id="MathJax-Span-240" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-241" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-242" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-243" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">50</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>=</mo><mn>5</mn><mo>×</mo><mn>10</mn><mo>=</mo><mn>50</mn></math></span></span><script type="math/tex" id="MathJax-Element-38">P = 5 \times 10 = 50</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-39-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;15&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-244" style="width: 7.313em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.532em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.48em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-245"><span class="mi" id="MathJax-Span-246" style="font-family: STIXGeneral-Italic;">Q</span><span class="mo" id="MathJax-Span-247" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-248" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">3</span><span class="mo" id="MathJax-Span-249" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-250" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-251" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-252" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">15</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Q</mi><mo>=</mo><mn>3</mn><mo>×</mo><mn>5</mn><mo>=</mo><mn>15</mn></math></span></span><script type="math/tex" id="MathJax-Element-39">Q = 3 \times 5 = 15 </script> (ball 4, 1, and 3)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-40-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-253" style="width: 9.768em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.708em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1008.71em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-254"><span class="mi" id="MathJax-Span-255" style="font-family: STIXGeneral-Italic;">R</span><span class="mo" id="MathJax-Span-256" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-257" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span><span class="mo" id="MathJax-Span-258" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mo" id="MathJax-Span-259" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">(</span><span class="mn" id="MathJax-Span-260" style="font-family: STIXGeneral-Regular;">10</span><span class="mo" id="MathJax-Span-261" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-262" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-263" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-264" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-265" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo>=</mo><mn>0</mn><mo>×</mo><mo stretchy="false">(</mo><mn>10</mn><mo>+</mo><mn>5</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-40">R = 0 \times (10 + 5) = 0 </script></li>
<li>return <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-41-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;65&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-266" style="width: 7.369em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.588em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.53em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-267"><span class="mi" id="MathJax-Span-268" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-269" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-270" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">Q</span><span class="mo" id="MathJax-Span-271" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-272" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">R</span><span class="mo" id="MathJax-Span-273" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-274" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">65</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>+</mo><mi>Q</mi><mo>+</mo><mi>R</mi><mo>=</mo><mn>65</mn></math></span></span><script type="math/tex" id="MathJax-Element-41">P + Q + R = 65</script></li>
</ul>
</li>
<li>Another example, to find the heuristic of <code>(2, 5, 4, 0, 3, 1)</code>:<ul>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-42-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;30&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-275" style="width: 7.759em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.922em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.92em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-276"><span class="mi" id="MathJax-Span-277" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-278" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-279" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">3</span><span class="mo" id="MathJax-Span-280" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-281" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-282" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-283" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">30</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>=</mo><mn>3</mn><mo>×</mo><mn>10</mn><mo>=</mo><mn>30</mn></math></span></span><script type="math/tex" id="MathJax-Element-42">P = 3 \times 10 = 30</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-43-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-284" style="width: 6.755em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.03em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1005.97em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-285"><span class="mi" id="MathJax-Span-286" style="font-family: STIXGeneral-Italic;">Q</span><span class="mo" id="MathJax-Span-287" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-288" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">1</span><span class="mo" id="MathJax-Span-289" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-290" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-291" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-292" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">5</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Q</mi><mo>=</mo><mn>1</mn><mo>×</mo><mn>5</mn><mo>=</mo><mn>5</mn></math></span></span><script type="math/tex" id="MathJax-Element-43">Q = 1 \times 5 = 5</script> (ball 4)</li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-44-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;30&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-293" style="width: 10.326em; display: inline-block;"><span style="display: inline-block; position: relative; width: 9.21em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1009.21em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-294"><span class="mi" id="MathJax-Span-295" style="font-family: STIXGeneral-Italic;">R</span><span class="mo" id="MathJax-Span-296" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-297" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">2</span><span class="mo" id="MathJax-Span-298" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mo" id="MathJax-Span-299" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">(</span><span class="mn" id="MathJax-Span-300" style="font-family: STIXGeneral-Regular;">10</span><span class="mo" id="MathJax-Span-301" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-302" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-303" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-304" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-305" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">30</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo>=</mo><mn>2</mn><mo>×</mo><mo stretchy="false">(</mo><mn>10</mn><mo>+</mo><mn>5</mn><mo stretchy="false">)</mo><mo>=</mo><mn>30</mn></math></span></span><script type="math/tex" id="MathJax-Element-44">R = 2 \times (10 + 5) = 30</script> (ball 3 and 1)</li>
<li>return <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-45-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;65&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-306" style="width: 7.369em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.588em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.53em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-307"><span class="mi" id="MathJax-Span-308" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-309" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-310" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">Q</span><span class="mo" id="MathJax-Span-311" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-312" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">R</span><span class="mo" id="MathJax-Span-313" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-314" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">65</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>+</mo><mi>Q</mi><mo>+</mo><mi>R</mi><mo>=</mo><mn>65</mn></math></span></span><script type="math/tex" id="MathJax-Element-45">P + Q + R = 65</script></li>
</ul>
</li>
<li>One last example, to find the heuristic of <code>(0, 1, 2, 3, 4, 5)</code>:<ul>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-46-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-315" style="width: 7.201em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.42em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.42em, 2.681em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-316"><span class="mi" id="MathJax-Span-317" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-318" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-319" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span><span class="mo" id="MathJax-Span-320" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-321" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">10</span><span class="mo" id="MathJax-Span-322" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-323" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.941em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>=</mo><mn>0</mn><mo>×</mo><mn>10</mn><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-46">P = 0 \times 10 = 0</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-47-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-324" style="width: 6.755em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.03em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.03em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-325"><span class="mi" id="MathJax-Span-326" style="font-family: STIXGeneral-Italic;">Q</span><span class="mo" id="MathJax-Span-327" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-328" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span><span class="mo" id="MathJax-Span-329" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mn" id="MathJax-Span-330" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-331" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-332" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Q</mi><mo>=</mo><mn>0</mn><mo>×</mo><mn>5</mn><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-47">Q = 0 \times 5 = 0</script></li>
<li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-48-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;&amp;#x00D7;&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-333" style="width: 9.768em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.708em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1008.71em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-334"><span class="mi" id="MathJax-Span-335" style="font-family: STIXGeneral-Italic;">R</span><span class="mo" id="MathJax-Span-336" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-337" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span><span class="mo" id="MathJax-Span-338" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">×</span><span class="mo" id="MathJax-Span-339" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">(</span><span class="mn" id="MathJax-Span-340" style="font-family: STIXGeneral-Regular;">10</span><span class="mo" id="MathJax-Span-341" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mn" id="MathJax-Span-342" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">5</span><span class="mo" id="MathJax-Span-343" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-344" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-345" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.128em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo>=</mo><mn>0</mn><mo>×</mo><mo stretchy="false">(</mo><mn>10</mn><mo>+</mo><mn>5</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-48">R = 0 \times (10 + 5) = 0</script></li>
<li>return <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-49-Frame" tabindex="0" style="position: relative;" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/math&gt;" role="presentation"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-346" style="width: 6.811em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.085em; height: 0px; font-size: 112%;"><span style="position: absolute; clip: rect(1.677em, 1006.09em, 2.849em, -999.997em); top: -2.508em; left: 0em;"><span class="mrow" id="MathJax-Span-347"><span class="mi" id="MathJax-Span-348" style="font-family: STIXGeneral-Italic;">P</span><span class="mo" id="MathJax-Span-349" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-350" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">Q</span><span class="mo" id="MathJax-Span-351" style="font-family: STIXGeneral-Regular; padding-left: 0.226em;">+</span><span class="mi" id="MathJax-Span-352" style="font-family: STIXGeneral-Italic; padding-left: 0.226em;">R</span><span class="mo" id="MathJax-Span-353" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">=</span><span class="mn" id="MathJax-Span-354" style="font-family: STIXGeneral-Regular; padding-left: 0.338em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.514em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.247em; border-left: 0px solid; width: 0px; height: 1.066em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>+</mo><mi>Q</mi><mo>+</mo><mi>R</mi><mo>=</mo><mn>0</mn></math></span></span><script type="math/tex" id="MathJax-Element-49">P + Q + R = 0</script>  (Goal state)</li>
</ul>
</li>
</ul><p>Is this heuristic admissible? Explain your answer.</p></article></section><section class="tut-section-credit"><p>Created by Kevin Lam (yklam2@cs), supervised by Dirk (sdirk@cs), for the course ENGG1202B, HKU, year 2017-2018</p></section></main></div><aside id="update-dialog" class="mdc-dialog" role="alertdialog" aria-labelledby="update-dialog-label" aria-describedby="update-dialog-description"><div class="mdc-dialog__surface"><header class="mdc-dialog__header"><h2 id="update-dialog-label" class="mdc-dialog__header__title">This page is updated.</h2></header><section id="update-dialog-description" class="mdc-dialog__body">A new version of this page is now available, the page will be reloaded.</section><footer class="mdc-dialog__footer"><button type="button" class="mdc-button mdc-dialog__footer_button mdc-dialog__footer__button--accept">Reload page</button></footer></div><div class="mdc-dialog__backdrop"></div></aside><div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-family: STIXSizeOneSym, sans-serif;"></div></div></body></html>